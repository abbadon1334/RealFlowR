# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: |

          # Download codeclimate test reporter
          curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./codeclimate-test-reporter
          chmod +x ./codeclimate-test-reporter

          # Install dotnet tools to generate test report
          dotnet tool install --global coverlet.console 
          dotnet add package coverlet.msbuild

          # Start codeclimate process
          ./codeclimate-test-reporter before-build

          # Build solution
          dotnet restore
          dotnet build ./FlowR.sln

          # Running unit tests - 'lcov' output format (and put coverage in correct path)
          dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=lcov /p:CoverletOutput=coverage /p:Exclude=[xunit.*]* ./FlowR.sln
          mkdir coverage && mv ./FlowR.Tests/coverage.info coverage/lcov.info

          # Send test report result to codeclimate
          ./codeclimate-test-reporter after-build -t lcov -r ${CC_TEST_REPORTER_ID} -p ./ --exit-code $?
