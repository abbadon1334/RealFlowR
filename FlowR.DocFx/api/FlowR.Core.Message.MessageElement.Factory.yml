### YamlMime:ManagedReference
items:
- uid: FlowR.Core.Message.MessageElement.Factory
  commentId: T:FlowR.Core.Message.MessageElement.Factory
  id: MessageElement.Factory
  parent: FlowR.Core.Message
  children:
  - FlowR.Core.Message.MessageElement.Factory.MessageAddMethod(FlowR.Core.INode,System.String,System.String)
  - FlowR.Core.Message.MessageElement.Factory.MessageCallMethod(FlowR.Core.INode,System.String,System.String[])
  - FlowR.Core.Message.MessageElement.Factory.MessageCreate(FlowR.Core.INode)
  - FlowR.Core.Message.MessageElement.Factory.MessageRemove(FlowR.Core.INode)
  - FlowR.Core.Message.MessageElement.Factory.MessageRemoveAttribute(FlowR.Core.INode,System.String)
  - FlowR.Core.Message.MessageElement.Factory.MessageSetAttribute(FlowR.Core.INode,System.String,System.String)
  - FlowR.Core.Message.MessageElement.Factory.MessageSetProperty(FlowR.Core.INode,System.String,System.String)
  - FlowR.Core.Message.MessageElement.Factory.MessageSetText(FlowR.Core.INode,System.String)
  - FlowR.Core.Message.MessageElement.Factory.MessageStartListenEvent(FlowR.Core.INode,System.String)
  - FlowR.Core.Message.MessageElement.Factory.MessageStopListenEvent(FlowR.Core.INode,System.String)
  langs:
  - csharp
  - vb
  name: MessageElement.Factory
  nameWithType: MessageElement.Factory
  fullName: FlowR.Core.Message.MessageElement.Factory
  type: Class
  source:
    remote:
      path: FlowR.Core/Message/MessageElement.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: Factory
    path: ../FlowR.Core/Message/MessageElement.cs
    startLine: 92
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core.Message
  summary: "\nMessage factory\n"
  example: []
  syntax:
    content: public static class Factory
    content.vb: Public Module Factory
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: FlowR.Core.Message.MessageElement.Factory.MessageCreate(FlowR.Core.INode)
  commentId: M:FlowR.Core.Message.MessageElement.Factory.MessageCreate(FlowR.Core.INode)
  id: MessageCreate(FlowR.Core.INode)
  parent: FlowR.Core.Message.MessageElement.Factory
  langs:
  - csharp
  - vb
  name: MessageCreate(INode)
  nameWithType: MessageElement.Factory.MessageCreate(INode)
  fullName: FlowR.Core.Message.MessageElement.Factory.MessageCreate(FlowR.Core.INode)
  type: Method
  source:
    remote:
      path: FlowR.Core/Message/MessageElement.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: MessageCreate
    path: ../FlowR.Core/Message/MessageElement.cs
    startLine: 99
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core.Message
  summary: "\nMessage Create Node\n"
  example: []
  syntax:
    content: public static IMessage MessageCreate(INode node)
    parameters:
    - id: node
      type: FlowR.Core.INode
      description: ''
    return:
      type: FlowR.Core.Message.IMessage
      description: ''
    content.vb: Public Shared Function MessageCreate(node As INode) As IMessage
  overload: FlowR.Core.Message.MessageElement.Factory.MessageCreate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: FlowR.Core.Message.MessageElement.Factory.MessageSetAttribute(FlowR.Core.INode,System.String,System.String)
  commentId: M:FlowR.Core.Message.MessageElement.Factory.MessageSetAttribute(FlowR.Core.INode,System.String,System.String)
  id: MessageSetAttribute(FlowR.Core.INode,System.String,System.String)
  parent: FlowR.Core.Message.MessageElement.Factory
  langs:
  - csharp
  - vb
  name: MessageSetAttribute(INode, String, String)
  nameWithType: MessageElement.Factory.MessageSetAttribute(INode, String, String)
  fullName: FlowR.Core.Message.MessageElement.Factory.MessageSetAttribute(FlowR.Core.INode, System.String, System.String)
  type: Method
  source:
    remote:
      path: FlowR.Core/Message/MessageElement.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: MessageSetAttribute
    path: ../FlowR.Core/Message/MessageElement.cs
    startLine: 118
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core.Message
  summary: "\nMessage SetAttribute\n"
  example: []
  syntax:
    content: public static IMessage MessageSetAttribute(INode node, string name, string value)
    parameters:
    - id: node
      type: FlowR.Core.INode
      description: ''
    - id: name
      type: System.String
      description: ''
    - id: value
      type: System.String
      description: ''
    return:
      type: FlowR.Core.Message.IMessage
      description: ''
    content.vb: Public Shared Function MessageSetAttribute(node As INode, name As String, value As String) As IMessage
  overload: FlowR.Core.Message.MessageElement.Factory.MessageSetAttribute*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: FlowR.Core.Message.MessageElement.Factory.MessageRemoveAttribute(FlowR.Core.INode,System.String)
  commentId: M:FlowR.Core.Message.MessageElement.Factory.MessageRemoveAttribute(FlowR.Core.INode,System.String)
  id: MessageRemoveAttribute(FlowR.Core.INode,System.String)
  parent: FlowR.Core.Message.MessageElement.Factory
  langs:
  - csharp
  - vb
  name: MessageRemoveAttribute(INode, String)
  nameWithType: MessageElement.Factory.MessageRemoveAttribute(INode, String)
  fullName: FlowR.Core.Message.MessageElement.Factory.MessageRemoveAttribute(FlowR.Core.INode, System.String)
  type: Method
  source:
    remote:
      path: FlowR.Core/Message/MessageElement.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: MessageRemoveAttribute
    path: ../FlowR.Core/Message/MessageElement.cs
    startLine: 134
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core.Message
  summary: "\nMessage RemoveAttribute\n"
  example: []
  syntax:
    content: public static IMessage MessageRemoveAttribute(INode node, string name)
    parameters:
    - id: node
      type: FlowR.Core.INode
      description: ''
    - id: name
      type: System.String
      description: ''
    return:
      type: FlowR.Core.Message.IMessage
      description: ''
    content.vb: Public Shared Function MessageRemoveAttribute(node As INode, name As String) As IMessage
  overload: FlowR.Core.Message.MessageElement.Factory.MessageRemoveAttribute*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: FlowR.Core.Message.MessageElement.Factory.MessageRemove(FlowR.Core.INode)
  commentId: M:FlowR.Core.Message.MessageElement.Factory.MessageRemove(FlowR.Core.INode)
  id: MessageRemove(FlowR.Core.INode)
  parent: FlowR.Core.Message.MessageElement.Factory
  langs:
  - csharp
  - vb
  name: MessageRemove(INode)
  nameWithType: MessageElement.Factory.MessageRemove(INode)
  fullName: FlowR.Core.Message.MessageElement.Factory.MessageRemove(FlowR.Core.INode)
  type: Method
  source:
    remote:
      path: FlowR.Core/Message/MessageElement.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: MessageRemove
    path: ../FlowR.Core/Message/MessageElement.cs
    startLine: 148
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core.Message
  summary: "\nMessage Remove Node\n"
  example: []
  syntax:
    content: public static IMessage MessageRemove(INode node)
    parameters:
    - id: node
      type: FlowR.Core.INode
      description: ''
    return:
      type: FlowR.Core.Message.IMessage
      description: ''
    content.vb: Public Shared Function MessageRemove(node As INode) As IMessage
  overload: FlowR.Core.Message.MessageElement.Factory.MessageRemove*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: FlowR.Core.Message.MessageElement.Factory.MessageStartListenEvent(FlowR.Core.INode,System.String)
  commentId: M:FlowR.Core.Message.MessageElement.Factory.MessageStartListenEvent(FlowR.Core.INode,System.String)
  id: MessageStartListenEvent(FlowR.Core.INode,System.String)
  parent: FlowR.Core.Message.MessageElement.Factory
  langs:
  - csharp
  - vb
  name: MessageStartListenEvent(INode, String)
  nameWithType: MessageElement.Factory.MessageStartListenEvent(INode, String)
  fullName: FlowR.Core.Message.MessageElement.Factory.MessageStartListenEvent(FlowR.Core.INode, System.String)
  type: Method
  source:
    remote:
      path: FlowR.Core/Message/MessageElement.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: MessageStartListenEvent
    path: ../FlowR.Core/Message/MessageElement.cs
    startLine: 162
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core.Message
  summary: "\nMessage StartListenEvent\n"
  example: []
  syntax:
    content: public static IMessage MessageStartListenEvent(INode node, string eventName)
    parameters:
    - id: node
      type: FlowR.Core.INode
      description: ''
    - id: eventName
      type: System.String
      description: ''
    return:
      type: FlowR.Core.Message.IMessage
      description: ''
    content.vb: Public Shared Function MessageStartListenEvent(node As INode, eventName As String) As IMessage
  overload: FlowR.Core.Message.MessageElement.Factory.MessageStartListenEvent*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: FlowR.Core.Message.MessageElement.Factory.MessageStopListenEvent(FlowR.Core.INode,System.String)
  commentId: M:FlowR.Core.Message.MessageElement.Factory.MessageStopListenEvent(FlowR.Core.INode,System.String)
  id: MessageStopListenEvent(FlowR.Core.INode,System.String)
  parent: FlowR.Core.Message.MessageElement.Factory
  langs:
  - csharp
  - vb
  name: MessageStopListenEvent(INode, String)
  nameWithType: MessageElement.Factory.MessageStopListenEvent(INode, String)
  fullName: FlowR.Core.Message.MessageElement.Factory.MessageStopListenEvent(FlowR.Core.INode, System.String)
  type: Method
  source:
    remote:
      path: FlowR.Core/Message/MessageElement.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: MessageStopListenEvent
    path: ../FlowR.Core/Message/MessageElement.cs
    startLine: 177
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core.Message
  summary: "\nMessage StopListenEvent\n"
  example: []
  syntax:
    content: public static IMessage MessageStopListenEvent(INode node, string eventName)
    parameters:
    - id: node
      type: FlowR.Core.INode
      description: ''
    - id: eventName
      type: System.String
      description: ''
    return:
      type: FlowR.Core.Message.IMessage
      description: ''
    content.vb: Public Shared Function MessageStopListenEvent(node As INode, eventName As String) As IMessage
  overload: FlowR.Core.Message.MessageElement.Factory.MessageStopListenEvent*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: FlowR.Core.Message.MessageElement.Factory.MessageSetText(FlowR.Core.INode,System.String)
  commentId: M:FlowR.Core.Message.MessageElement.Factory.MessageSetText(FlowR.Core.INode,System.String)
  id: MessageSetText(FlowR.Core.INode,System.String)
  parent: FlowR.Core.Message.MessageElement.Factory
  langs:
  - csharp
  - vb
  name: MessageSetText(INode, String)
  nameWithType: MessageElement.Factory.MessageSetText(INode, String)
  fullName: FlowR.Core.Message.MessageElement.Factory.MessageSetText(FlowR.Core.INode, System.String)
  type: Method
  source:
    remote:
      path: FlowR.Core/Message/MessageElement.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: MessageSetText
    path: ../FlowR.Core/Message/MessageElement.cs
    startLine: 192
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core.Message
  summary: "\nMessage SetText\n"
  example: []
  syntax:
    content: public static IMessage MessageSetText(INode node, string text)
    parameters:
    - id: node
      type: FlowR.Core.INode
      description: ''
    - id: text
      type: System.String
      description: ''
    return:
      type: FlowR.Core.Message.IMessage
      description: ''
    content.vb: Public Shared Function MessageSetText(node As INode, text As String) As IMessage
  overload: FlowR.Core.Message.MessageElement.Factory.MessageSetText*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: FlowR.Core.Message.MessageElement.Factory.MessageSetProperty(FlowR.Core.INode,System.String,System.String)
  commentId: M:FlowR.Core.Message.MessageElement.Factory.MessageSetProperty(FlowR.Core.INode,System.String,System.String)
  id: MessageSetProperty(FlowR.Core.INode,System.String,System.String)
  parent: FlowR.Core.Message.MessageElement.Factory
  langs:
  - csharp
  - vb
  name: MessageSetProperty(INode, String, String)
  nameWithType: MessageElement.Factory.MessageSetProperty(INode, String, String)
  fullName: FlowR.Core.Message.MessageElement.Factory.MessageSetProperty(FlowR.Core.INode, System.String, System.String)
  type: Method
  source:
    remote:
      path: FlowR.Core/Message/MessageElement.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: MessageSetProperty
    path: ../FlowR.Core/Message/MessageElement.cs
    startLine: 208
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core.Message
  summary: "\nMessage Set Node Property\n"
  example: []
  syntax:
    content: public static IMessage MessageSetProperty(INode node, string name, string value)
    parameters:
    - id: node
      type: FlowR.Core.INode
      description: ''
    - id: name
      type: System.String
      description: ''
    - id: value
      type: System.String
      description: ''
    return:
      type: FlowR.Core.Message.IMessage
      description: ''
    content.vb: Public Shared Function MessageSetProperty(node As INode, name As String, value As String) As IMessage
  overload: FlowR.Core.Message.MessageElement.Factory.MessageSetProperty*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: FlowR.Core.Message.MessageElement.Factory.MessageCallMethod(FlowR.Core.INode,System.String,System.String[])
  commentId: M:FlowR.Core.Message.MessageElement.Factory.MessageCallMethod(FlowR.Core.INode,System.String,System.String[])
  id: MessageCallMethod(FlowR.Core.INode,System.String,System.String[])
  parent: FlowR.Core.Message.MessageElement.Factory
  langs:
  - csharp
  - vb
  name: MessageCallMethod(INode, String, String[])
  nameWithType: MessageElement.Factory.MessageCallMethod(INode, String, String[])
  fullName: FlowR.Core.Message.MessageElement.Factory.MessageCallMethod(FlowR.Core.INode, System.String, System.String[])
  type: Method
  source:
    remote:
      path: FlowR.Core/Message/MessageElement.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: MessageCallMethod
    path: ../FlowR.Core/Message/MessageElement.cs
    startLine: 225
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core.Message
  summary: "\nMessage CallMethod\n"
  example: []
  syntax:
    content: public static IMessage MessageCallMethod(INode node, string name, params string[] args)
    parameters:
    - id: node
      type: FlowR.Core.INode
      description: ''
    - id: name
      type: System.String
      description: ''
    - id: args
      type: System.String[]
      description: ''
    return:
      type: FlowR.Core.Message.IMessage
      description: ''
    content.vb: Public Shared Function MessageCallMethod(node As INode, name As String, ParamArray args As String()) As IMessage
  overload: FlowR.Core.Message.MessageElement.Factory.MessageCallMethod*
  nameWithType.vb: MessageElement.Factory.MessageCallMethod(INode, String, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: FlowR.Core.Message.MessageElement.Factory.MessageCallMethod(FlowR.Core.INode, System.String, System.String())
  name.vb: MessageCallMethod(INode, String, String())
- uid: FlowR.Core.Message.MessageElement.Factory.MessageAddMethod(FlowR.Core.INode,System.String,System.String)
  commentId: M:FlowR.Core.Message.MessageElement.Factory.MessageAddMethod(FlowR.Core.INode,System.String,System.String)
  id: MessageAddMethod(FlowR.Core.INode,System.String,System.String)
  parent: FlowR.Core.Message.MessageElement.Factory
  langs:
  - csharp
  - vb
  name: MessageAddMethod(INode, String, String)
  nameWithType: MessageElement.Factory.MessageAddMethod(INode, String, String)
  fullName: FlowR.Core.Message.MessageElement.Factory.MessageAddMethod(FlowR.Core.INode, System.String, System.String)
  type: Method
  source:
    remote:
      path: FlowR.Core/Message/MessageElement.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: MessageAddMethod
    path: ../FlowR.Core/Message/MessageElement.cs
    startLine: 242
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core.Message
  summary: "\nMessage AddMethod\n"
  example: []
  syntax:
    content: public static IMessage MessageAddMethod(INode node, string name, string jsStatement)
    parameters:
    - id: node
      type: FlowR.Core.INode
      description: ''
    - id: name
      type: System.String
      description: ''
    - id: jsStatement
      type: System.String
      description: ''
    return:
      type: FlowR.Core.Message.IMessage
      description: ''
    content.vb: Public Shared Function MessageAddMethod(node As INode, name As String, jsStatement As String) As IMessage
  overload: FlowR.Core.Message.MessageElement.Factory.MessageAddMethod*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: FlowR.Core.Message
  commentId: N:FlowR.Core.Message
  name: FlowR.Core.Message
  nameWithType: FlowR.Core.Message
  fullName: FlowR.Core.Message
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: FlowR.Core.Message.MessageElement.Factory.MessageCreate*
  commentId: Overload:FlowR.Core.Message.MessageElement.Factory.MessageCreate
  name: MessageCreate
  nameWithType: MessageElement.Factory.MessageCreate
  fullName: FlowR.Core.Message.MessageElement.Factory.MessageCreate
- uid: FlowR.Core.INode
  commentId: T:FlowR.Core.INode
  parent: FlowR.Core
  name: INode
  nameWithType: INode
  fullName: FlowR.Core.INode
- uid: FlowR.Core.Message.IMessage
  commentId: T:FlowR.Core.Message.IMessage
  parent: FlowR.Core.Message
  name: IMessage
  nameWithType: IMessage
  fullName: FlowR.Core.Message.IMessage
- uid: FlowR.Core
  commentId: N:FlowR.Core
  name: FlowR.Core
  nameWithType: FlowR.Core
  fullName: FlowR.Core
- uid: FlowR.Core.Message.MessageElement.Factory.MessageSetAttribute*
  commentId: Overload:FlowR.Core.Message.MessageElement.Factory.MessageSetAttribute
  name: MessageSetAttribute
  nameWithType: MessageElement.Factory.MessageSetAttribute
  fullName: FlowR.Core.Message.MessageElement.Factory.MessageSetAttribute
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: FlowR.Core.Message.MessageElement.Factory.MessageRemoveAttribute*
  commentId: Overload:FlowR.Core.Message.MessageElement.Factory.MessageRemoveAttribute
  name: MessageRemoveAttribute
  nameWithType: MessageElement.Factory.MessageRemoveAttribute
  fullName: FlowR.Core.Message.MessageElement.Factory.MessageRemoveAttribute
- uid: FlowR.Core.Message.MessageElement.Factory.MessageRemove*
  commentId: Overload:FlowR.Core.Message.MessageElement.Factory.MessageRemove
  name: MessageRemove
  nameWithType: MessageElement.Factory.MessageRemove
  fullName: FlowR.Core.Message.MessageElement.Factory.MessageRemove
- uid: FlowR.Core.Message.MessageElement.Factory.MessageStartListenEvent*
  commentId: Overload:FlowR.Core.Message.MessageElement.Factory.MessageStartListenEvent
  name: MessageStartListenEvent
  nameWithType: MessageElement.Factory.MessageStartListenEvent
  fullName: FlowR.Core.Message.MessageElement.Factory.MessageStartListenEvent
- uid: FlowR.Core.Message.MessageElement.Factory.MessageStopListenEvent*
  commentId: Overload:FlowR.Core.Message.MessageElement.Factory.MessageStopListenEvent
  name: MessageStopListenEvent
  nameWithType: MessageElement.Factory.MessageStopListenEvent
  fullName: FlowR.Core.Message.MessageElement.Factory.MessageStopListenEvent
- uid: FlowR.Core.Message.MessageElement.Factory.MessageSetText*
  commentId: Overload:FlowR.Core.Message.MessageElement.Factory.MessageSetText
  name: MessageSetText
  nameWithType: MessageElement.Factory.MessageSetText
  fullName: FlowR.Core.Message.MessageElement.Factory.MessageSetText
- uid: FlowR.Core.Message.MessageElement.Factory.MessageSetProperty*
  commentId: Overload:FlowR.Core.Message.MessageElement.Factory.MessageSetProperty
  name: MessageSetProperty
  nameWithType: MessageElement.Factory.MessageSetProperty
  fullName: FlowR.Core.Message.MessageElement.Factory.MessageSetProperty
- uid: FlowR.Core.Message.MessageElement.Factory.MessageCallMethod*
  commentId: Overload:FlowR.Core.Message.MessageElement.Factory.MessageCallMethod
  name: MessageCallMethod
  nameWithType: MessageElement.Factory.MessageCallMethod
  fullName: FlowR.Core.Message.MessageElement.Factory.MessageCallMethod
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: FlowR.Core.Message.MessageElement.Factory.MessageAddMethod*
  commentId: Overload:FlowR.Core.Message.MessageElement.Factory.MessageAddMethod
  name: MessageAddMethod
  nameWithType: MessageElement.Factory.MessageAddMethod
  fullName: FlowR.Core.Message.MessageElement.Factory.MessageAddMethod
