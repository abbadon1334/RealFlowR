### YamlMime:ManagedReference
items:
- uid: FlowR.Core.Node
  commentId: T:FlowR.Core.Node
  id: Node
  parent: FlowR.Core
  children:
  - FlowR.Core.Node.#ctor
  - FlowR.Core.Node.Add``1(System.Collections.Generic.Dictionary{System.String,System.String})
  - FlowR.Core.Node.Add``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String})
  - FlowR.Core.Node.AddCssClass(System.String)
  - FlowR.Core.Node.AddJavascriptMethod(System.String,System.String)
  - FlowR.Core.Node.CallClientMethod(System.String,System.String[])
  - FlowR.Core.Node.CallClientMethodAsync(System.String,System.String[])
  - FlowR.Core.Node.DefaultAttributes
  - FlowR.Core.Node.GetApplication
  - FlowR.Core.Node.GetAttribute(System.String)
  - FlowR.Core.Node.GetAttributes
  - FlowR.Core.Node.GetChildren
  - FlowR.Core.Node.GetChildrenOfType``1
  - FlowR.Core.Node.GetCommunication
  - FlowR.Core.Node.GetEventHandlers
  - FlowR.Core.Node.GetFirstOwnerOfType``1
  - FlowR.Core.Node.GetLogger
  - FlowR.Core.Node.GetOwner
  - FlowR.Core.Node.GetProperties
  - FlowR.Core.Node.GetProperty(System.String)
  - FlowR.Core.Node.GetPropertyAsync(System.String)
  - FlowR.Core.Node.GetTagName
  - FlowR.Core.Node.GetText
  - FlowR.Core.Node.GetUuid
  - FlowR.Core.Node.HasAttribute(System.String)
  - FlowR.Core.Node.Init
  - FlowR.Core.Node.Off(System.String)
  - FlowR.Core.Node.Off(System.String,System.EventHandler)
  - FlowR.Core.Node.On(System.String,System.EventHandler)
  - FlowR.Core.Node.OnClientEventTriggered(System.String,System.EventArgs)
  - FlowR.Core.Node.Remove(FlowR.Core.INode)
  - FlowR.Core.Node.RemoveAttribute(System.String)
  - FlowR.Core.Node.RemoveCssClass(System.String)
  - FlowR.Core.Node.SetApplication(FlowR.Core.Application)
  - FlowR.Core.Node.SetAttribute(System.Collections.Generic.Dictionary{System.String,System.String})
  - FlowR.Core.Node.SetAttribute(System.String,System.String)
  - FlowR.Core.Node.SetOwner(FlowR.Core.INode)
  - FlowR.Core.Node.SetProperty(System.String,System.String)
  - FlowR.Core.Node.SetText(System.String)
  - FlowR.Core.Node.SetUuid(System.String)
  - FlowR.Core.Node.TagName
  - FlowR.Core.Node.ValidateNode
  langs:
  - csharp
  - vb
  name: Node
  nameWithType: Node
  fullName: FlowR.Core.Node
  type: Class
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: Node
    path: ../FlowR.Core/Node.cs
    startLine: 13
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nINode implementation class\n"
  example: []
  syntax:
    content: 'public abstract class Node : INode'
    content.vb: >-
      Public MustInherit Class Node
          Implements INode
  inheritance:
  - System.Object
  derivedClasses:
  - FlowR.Core.NodeComponent
  - FlowR.Core.NodeControl
  implements:
  - FlowR.Core.INode
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: FlowR.Core.Node.#ctor
  commentId: M:FlowR.Core.Node.#ctor
  id: '#ctor'
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: Node()
  nameWithType: Node.Node()
  fullName: FlowR.Core.Node.Node()
  type: Constructor
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: .ctor
    path: ../FlowR.Core/Node.cs
    startLine: 36
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nConstructor\n"
  example: []
  syntax:
    content: public Node()
    content.vb: Public Sub New
  overload: FlowR.Core.Node.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FlowR.Core.Node.DefaultAttributes
  commentId: P:FlowR.Core.Node.DefaultAttributes
  id: DefaultAttributes
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: DefaultAttributes
  nameWithType: Node.DefaultAttributes
  fullName: FlowR.Core.Node.DefaultAttributes
  type: Property
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: DefaultAttributes
    path: ../FlowR.Core/Node.cs
    startLine: 45
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nSetup default Component attributes\n"
  example: []
  syntax:
    content: protected virtual Dictionary<string, string> DefaultAttributes { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.String}
    content.vb: Protected Overridable Property DefaultAttributes As Dictionary(Of String, String)
  overload: FlowR.Core.Node.DefaultAttributes*
  modifiers.csharp:
  - protected
  - virtual
  - get
  - set
  modifiers.vb:
  - Protected
  - Overridable
- uid: FlowR.Core.Node.TagName
  commentId: P:FlowR.Core.Node.TagName
  id: TagName
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: TagName
  nameWithType: Node.TagName
  fullName: FlowR.Core.Node.TagName
  type: Property
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: TagName
    path: ../FlowR.Core/Node.cs
    startLine: 50
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nStored HTML Tag name.\n"
  example: []
  syntax:
    content: protected virtual string TagName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Protected Overridable ReadOnly Property TagName As String
  overload: FlowR.Core.Node.TagName*
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: FlowR.Core.Node.GetTagName
  commentId: M:FlowR.Core.Node.GetTagName
  id: GetTagName
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: GetTagName()
  nameWithType: Node.GetTagName()
  fullName: FlowR.Core.Node.GetTagName()
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: GetTagName
    path: ../FlowR.Core/Node.cs
    startLine: 53
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nGet HTML Tag name.\n"
  example: []
  syntax:
    content: public string GetTagName()
    return:
      type: System.String
      description: ''
    content.vb: Public Function GetTagName As String
  overload: FlowR.Core.Node.GetTagName*
  implements:
  - FlowR.Core.INode.GetTagName
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FlowR.Core.Node.GetOwner
  commentId: M:FlowR.Core.Node.GetOwner
  id: GetOwner
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: GetOwner()
  nameWithType: Node.GetOwner()
  fullName: FlowR.Core.Node.GetOwner()
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: GetOwner
    path: ../FlowR.Core/Node.cs
    startLine: 59
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nGet INode Owner, the parent INode.\n"
  example: []
  syntax:
    content: public INode GetOwner()
    return:
      type: FlowR.Core.INode
      description: ''
    content.vb: Public Function GetOwner As INode
  overload: FlowR.Core.Node.GetOwner*
  implements:
  - FlowR.Core.INode.GetOwner
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FlowR.Core.Node.SetOwner(FlowR.Core.INode)
  commentId: M:FlowR.Core.Node.SetOwner(FlowR.Core.INode)
  id: SetOwner(FlowR.Core.INode)
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: SetOwner(INode)
  nameWithType: Node.SetOwner(INode)
  fullName: FlowR.Core.Node.SetOwner(FlowR.Core.INode)
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: SetOwner
    path: ../FlowR.Core/Node.cs
    startLine: 65
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nSet Inode Owner, the parent INode.\n"
  example: []
  syntax:
    content: public void SetOwner(INode owner)
    parameters:
    - id: owner
      type: FlowR.Core.INode
      description: ''
    content.vb: Public Sub SetOwner(owner As INode)
  overload: FlowR.Core.Node.SetOwner*
  implements:
  - FlowR.Core.INode.SetOwner(FlowR.Core.INode)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FlowR.Core.Node.GetUuid
  commentId: M:FlowR.Core.Node.GetUuid
  id: GetUuid
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: GetUuid()
  nameWithType: Node.GetUuid()
  fullName: FlowR.Core.Node.GetUuid()
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: GetUuid
    path: ../FlowR.Core/Node.cs
    startLine: 70
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nGet Uuid. if not defined will be generated on first request.\n"
  example: []
  syntax:
    content: public string GetUuid()
    return:
      type: System.String
      description: ''
    content.vb: Public Function GetUuid As String
  overload: FlowR.Core.Node.GetUuid*
  implements:
  - FlowR.Core.INode.GetUuid
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FlowR.Core.Node.GetAttributes
  commentId: M:FlowR.Core.Node.GetAttributes
  id: GetAttributes
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: GetAttributes()
  nameWithType: Node.GetAttributes()
  fullName: FlowR.Core.Node.GetAttributes()
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: GetAttributes
    path: ../FlowR.Core/Node.cs
    startLine: 80
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nGet the Dictionary attributes of the Inode\n"
  example: []
  syntax:
    content: public ObservableDictionary<string, string> GetAttributes()
    return:
      type: FlowR.Core.ObservableDictionary{System.String,System.String}
      description: ''
    content.vb: Public Function GetAttributes As ObservableDictionary(Of String, String)
  overload: FlowR.Core.Node.GetAttributes*
  implements:
  - FlowR.Core.INode.GetAttributes
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FlowR.Core.Node.GetProperties
  commentId: M:FlowR.Core.Node.GetProperties
  id: GetProperties
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: GetProperties()
  nameWithType: Node.GetProperties()
  fullName: FlowR.Core.Node.GetProperties()
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: GetProperties
    path: ../FlowR.Core/Node.cs
    startLine: 86
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nGet the Dictionary properties of the Inode\n"
  example: []
  syntax:
    content: public ObservableDictionary<string, string> GetProperties()
    return:
      type: FlowR.Core.ObservableDictionary{System.String,System.String}
      description: ''
    content.vb: Public Function GetProperties As ObservableDictionary(Of String, String)
  overload: FlowR.Core.Node.GetProperties*
  implements:
  - FlowR.Core.INode.GetProperties
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FlowR.Core.Node.GetEventHandlers
  commentId: M:FlowR.Core.Node.GetEventHandlers
  id: GetEventHandlers
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: GetEventHandlers()
  nameWithType: Node.GetEventHandlers()
  fullName: FlowR.Core.Node.GetEventHandlers()
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: GetEventHandlers
    path: ../FlowR.Core/Node.cs
    startLine: 92
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nGet the Dictionary properties of the Inode\n"
  example: []
  syntax:
    content: public ObservableDictionary<string, List<EventHandler>> GetEventHandlers()
    return:
      type: FlowR.Core.ObservableDictionary{System.String,System.Collections.Generic.List{System.EventHandler}}
      description: ''
    content.vb: Public Function GetEventHandlers As ObservableDictionary(Of String, List(Of EventHandler))
  overload: FlowR.Core.Node.GetEventHandlers*
  implements:
  - FlowR.Core.INode.GetEventHandlers
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FlowR.Core.Node.GetApplication
  commentId: M:FlowR.Core.Node.GetApplication
  id: GetApplication
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: GetApplication()
  nameWithType: Node.GetApplication()
  fullName: FlowR.Core.Node.GetApplication()
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: GetApplication
    path: ../FlowR.Core/Node.cs
    startLine: 98
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nGet the linked Application Client.\n"
  example: []
  syntax:
    content: public Application GetApplication()
    return:
      type: FlowR.Core.Application
      description: ''
    content.vb: Public Function GetApplication As Application
  overload: FlowR.Core.Node.GetApplication*
  implements:
  - FlowR.Core.INode.GetApplication
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FlowR.Core.Node.GetCommunication
  commentId: M:FlowR.Core.Node.GetCommunication
  id: GetCommunication
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: GetCommunication()
  nameWithType: Node.GetCommunication()
  fullName: FlowR.Core.Node.GetCommunication()
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: GetCommunication
    path: ../FlowR.Core/Node.cs
    startLine: 104
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nGet the ApplicationCommunication of the Inode\n"
  example: []
  syntax:
    content: public ApplicationCommunication GetCommunication()
    return:
      type: FlowR.Core.ApplicationCommunication
      description: ''
    content.vb: Public Function GetCommunication As ApplicationCommunication
  overload: FlowR.Core.Node.GetCommunication*
  implements:
  - FlowR.Core.INode.GetCommunication
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FlowR.Core.Node.GetChildren
  commentId: M:FlowR.Core.Node.GetChildren
  id: GetChildren
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: GetChildren()
  nameWithType: Node.GetChildren()
  fullName: FlowR.Core.Node.GetChildren()
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: GetChildren
    path: ../FlowR.Core/Node.cs
    startLine: 110
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nGet Children Inodes\n"
  example: []
  syntax:
    content: public ObservableDictionary<string, INode> GetChildren()
    return:
      type: FlowR.Core.ObservableDictionary{System.String,FlowR.Core.INode}
      description: ''
    content.vb: Public Function GetChildren As ObservableDictionary(Of String, INode)
  overload: FlowR.Core.Node.GetChildren*
  implements:
  - FlowR.Core.INode.GetChildren
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FlowR.Core.Node.GetText
  commentId: M:FlowR.Core.Node.GetText
  id: GetText
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: GetText()
  nameWithType: Node.GetText()
  fullName: FlowR.Core.Node.GetText()
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: GetText
    path: ../FlowR.Core/Node.cs
    startLine: 116
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nGet Node Text.\n"
  example: []
  syntax:
    content: public virtual string GetText()
    return:
      type: System.String
      description: ''
    content.vb: Public Overridable Function GetText As String
  overload: FlowR.Core.Node.GetText*
  implements:
  - FlowR.Core.INode.GetText
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: FlowR.Core.Node.SetText(System.String)
  commentId: M:FlowR.Core.Node.SetText(System.String)
  id: SetText(System.String)
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: SetText(String)
  nameWithType: Node.SetText(String)
  fullName: FlowR.Core.Node.SetText(System.String)
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: SetText
    path: ../FlowR.Core/Node.cs
    startLine: 122
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nSet Node Text.\n"
  example: []
  syntax:
    content: public virtual INode SetText(string text)
    parameters:
    - id: text
      type: System.String
      description: ''
    return:
      type: FlowR.Core.INode
    content.vb: Public Overridable Function SetText(text As String) As INode
  overload: FlowR.Core.Node.SetText*
  implements:
  - FlowR.Core.INode.SetText(System.String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: FlowR.Core.Node.Init
  commentId: M:FlowR.Core.Node.Init
  id: Init
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: Init()
  nameWithType: Node.Init()
  fullName: FlowR.Core.Node.Init()
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: Init
    path: ../FlowR.Core/Node.cs
    startLine: 135
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nStarting point of every component.\nWill be called after attach to Owner.\nThis is the method you are looking for if you want to make a new component\n"
  example: []
  syntax:
    content: public virtual void Init()
    content.vb: Public Overridable Sub Init
  overload: FlowR.Core.Node.Init*
  implements:
  - FlowR.Core.INode.Init
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: FlowR.Core.Node.SetAttribute(System.String,System.String)
  commentId: M:FlowR.Core.Node.SetAttribute(System.String,System.String)
  id: SetAttribute(System.String,System.String)
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: SetAttribute(String, String)
  nameWithType: Node.SetAttribute(String, String)
  fullName: FlowR.Core.Node.SetAttribute(System.String, System.String)
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: SetAttribute
    path: ../FlowR.Core/Node.cs
    startLine: 144
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nSet Attribute of INode\n"
  example: []
  syntax:
    content: public virtual INode SetAttribute(string name, string value)
    parameters:
    - id: name
      type: System.String
      description: ''
    - id: value
      type: System.String
      description: ''
    return:
      type: FlowR.Core.INode
    content.vb: Public Overridable Function SetAttribute(name As String, value As String) As INode
  overload: FlowR.Core.Node.SetAttribute*
  implements:
  - FlowR.Core.INode.SetAttribute(System.String,System.String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: FlowR.Core.Node.GetAttribute(System.String)
  commentId: M:FlowR.Core.Node.GetAttribute(System.String)
  id: GetAttribute(System.String)
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: GetAttribute(String)
  nameWithType: Node.GetAttribute(String)
  fullName: FlowR.Core.Node.GetAttribute(System.String)
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: GetAttribute
    path: ../FlowR.Core/Node.cs
    startLine: 161
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nGet Attribute of Inode by name.\n"
  example: []
  syntax:
    content: public string GetAttribute(string name)
    parameters:
    - id: name
      type: System.String
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: Public Function GetAttribute(name As String) As String
  overload: FlowR.Core.Node.GetAttribute*
  implements:
  - FlowR.Core.INode.GetAttribute(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FlowR.Core.Node.RemoveAttribute(System.String)
  commentId: M:FlowR.Core.Node.RemoveAttribute(System.String)
  id: RemoveAttribute(System.String)
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: RemoveAttribute(String)
  nameWithType: Node.RemoveAttribute(String)
  fullName: FlowR.Core.Node.RemoveAttribute(System.String)
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: RemoveAttribute
    path: ../FlowR.Core/Node.cs
    startLine: 169
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nRemove Attribute of Inode by name.\n"
  example: []
  syntax:
    content: public virtual INode RemoveAttribute(string name)
    parameters:
    - id: name
      type: System.String
      description: ''
    return:
      type: FlowR.Core.INode
      description: ''
    content.vb: Public Overridable Function RemoveAttribute(name As String) As INode
  overload: FlowR.Core.Node.RemoveAttribute*
  implements:
  - FlowR.Core.INode.RemoveAttribute(System.String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: FlowR.Core.Node.SetAttribute(System.Collections.Generic.Dictionary{System.String,System.String})
  commentId: M:FlowR.Core.Node.SetAttribute(System.Collections.Generic.Dictionary{System.String,System.String})
  id: SetAttribute(System.Collections.Generic.Dictionary{System.String,System.String})
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: SetAttribute(Dictionary<String, String>)
  nameWithType: Node.SetAttribute(Dictionary<String, String>)
  fullName: FlowR.Core.Node.SetAttribute(System.Collections.Generic.Dictionary<System.String, System.String>)
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: SetAttribute
    path: ../FlowR.Core/Node.cs
    startLine: 180
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nShort hand to set multiple attributes\n"
  example: []
  syntax:
    content: public virtual INode SetAttribute(Dictionary<string, string> attributes = null)
    parameters:
    - id: attributes
      type: System.Collections.Generic.Dictionary{System.String,System.String}
      description: ''
    return:
      type: FlowR.Core.INode
    content.vb: Public Overridable Function SetAttribute(attributes As Dictionary(Of String, String) = Nothing) As INode
  overload: FlowR.Core.Node.SetAttribute*
  implements:
  - FlowR.Core.INode.SetAttribute(System.Collections.Generic.Dictionary{System.String,System.String})
  nameWithType.vb: Node.SetAttribute(Dictionary(Of String, String))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: FlowR.Core.Node.SetAttribute(System.Collections.Generic.Dictionary(Of System.String, System.String))
  name.vb: SetAttribute(Dictionary(Of String, String))
- uid: FlowR.Core.Node.HasAttribute(System.String)
  commentId: M:FlowR.Core.Node.HasAttribute(System.String)
  id: HasAttribute(System.String)
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: HasAttribute(String)
  nameWithType: Node.HasAttribute(String)
  fullName: FlowR.Core.Node.HasAttribute(System.String)
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: HasAttribute
    path: ../FlowR.Core/Node.cs
    startLine: 193
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nReturn if Has Attribute with name.\n"
  example: []
  syntax:
    content: public bool HasAttribute(string name)
    parameters:
    - id: name
      type: System.String
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function HasAttribute(name As String) As Boolean
  overload: FlowR.Core.Node.HasAttribute*
  implements:
  - FlowR.Core.INode.HasAttribute(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FlowR.Core.Node.SetProperty(System.String,System.String)
  commentId: M:FlowR.Core.Node.SetProperty(System.String,System.String)
  id: SetProperty(System.String,System.String)
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: SetProperty(String, String)
  nameWithType: Node.SetProperty(String, String)
  fullName: FlowR.Core.Node.SetProperty(System.String, System.String)
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: SetProperty
    path: ../FlowR.Core/Node.cs
    startLine: 199
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nSet Node property on client side.\n"
  example: []
  syntax:
    content: public virtual INode SetProperty(string name, string value)
    parameters:
    - id: name
      type: System.String
      description: ''
    - id: value
      type: System.String
      description: ''
    return:
      type: FlowR.Core.INode
    content.vb: Public Overridable Function SetProperty(name As String, value As String) As INode
  overload: FlowR.Core.Node.SetProperty*
  implements:
  - FlowR.Core.INode.SetProperty(System.String,System.String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: FlowR.Core.Node.GetProperty(System.String)
  commentId: M:FlowR.Core.Node.GetProperty(System.String)
  id: GetProperty(System.String)
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: GetProperty(String)
  nameWithType: Node.GetProperty(String)
  fullName: FlowR.Core.Node.GetProperty(System.String)
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: GetProperty
    path: ../FlowR.Core/Node.cs
    startLine: 207
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nGet Node property from memory.\n"
  example: []
  syntax:
    content: public string GetProperty(string path)
    parameters:
    - id: path
      type: System.String
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: Public Function GetProperty(path As String) As String
  overload: FlowR.Core.Node.GetProperty*
  implements:
  - FlowR.Core.INode.GetProperty(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FlowR.Core.Node.GetPropertyAsync(System.String)
  commentId: M:FlowR.Core.Node.GetPropertyAsync(System.String)
  id: GetPropertyAsync(System.String)
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: GetPropertyAsync(String)
  nameWithType: Node.GetPropertyAsync(String)
  fullName: FlowR.Core.Node.GetPropertyAsync(System.String)
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: GetPropertyAsync
    path: ../FlowR.Core/Node.cs
    startLine: 215
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nAsync request INode property from client.\nWait for response, update in memory and return result.\n"
  example: []
  syntax:
    content: public Task<string> GetPropertyAsync(string path)
    parameters:
    - id: path
      type: System.String
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: ''
    content.vb: Public Function GetPropertyAsync(path As String) As Task(Of String)
  overload: FlowR.Core.Node.GetPropertyAsync*
  implements:
  - FlowR.Core.INode.GetPropertyAsync(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FlowR.Core.Node.Add``1(System.Collections.Generic.Dictionary{System.String,System.String})
  commentId: M:FlowR.Core.Node.Add``1(System.Collections.Generic.Dictionary{System.String,System.String})
  id: Add``1(System.Collections.Generic.Dictionary{System.String,System.String})
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: Add<TNodeComponent>(Dictionary<String, String>)
  nameWithType: Node.Add<TNodeComponent>(Dictionary<String, String>)
  fullName: FlowR.Core.Node.Add<TNodeComponent>(System.Collections.Generic.Dictionary<System.String, System.String>)
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: Add
    path: ../FlowR.Core/Node.cs
    startLine: 227
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nFluid Add Element\n"
  example: []
  syntax:
    content: >-
      public TNodeComponent Add<TNodeComponent>(Dictionary<string, string> attributes = null)
          where TNodeComponent : INodeComponent, new()
    parameters:
    - id: attributes
      type: System.Collections.Generic.Dictionary{System.String,System.String}
      description: ''
    typeParameters:
    - id: TNodeComponent
      description: ''
    return:
      type: '{TNodeComponent}'
      description: ''
    content.vb: Public Function Add(Of TNodeComponent As {INodeComponent, New})(attributes As Dictionary(Of String, String) = Nothing) As TNodeComponent
  overload: FlowR.Core.Node.Add*
  implements:
  - FlowR.Core.INode.Add``1(System.Collections.Generic.Dictionary{System.String,System.String})
  nameWithType.vb: Node.Add(Of TNodeComponent)(Dictionary(Of String, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FlowR.Core.Node.Add(Of TNodeComponent)(System.Collections.Generic.Dictionary(Of System.String, System.String))
  name.vb: Add(Of TNodeComponent)(Dictionary(Of String, String))
- uid: FlowR.Core.Node.Add``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String})
  commentId: M:FlowR.Core.Node.Add``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String})
  id: Add``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String})
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: Add<TNodeControl>(String, Dictionary<String, String>)
  nameWithType: Node.Add<TNodeControl>(String, Dictionary<String, String>)
  fullName: FlowR.Core.Node.Add<TNodeControl>(System.String, System.Collections.Generic.Dictionary<System.String, System.String>)
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: Add
    path: ../FlowR.Core/Node.cs
    startLine: 239
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nFluid Add Element\n"
  example: []
  syntax:
    content: >-
      public TNodeControl Add<TNodeControl>(string controlName, Dictionary<string, string> attributes = null)
          where TNodeControl : INodeControl, new()
    parameters:
    - id: controlName
      type: System.String
      description: ''
    - id: attributes
      type: System.Collections.Generic.Dictionary{System.String,System.String}
      description: ''
    typeParameters:
    - id: TNodeControl
      description: ''
    return:
      type: '{TNodeControl}'
      description: ''
    content.vb: Public Function Add(Of TNodeControl As {INodeControl, New})(controlName As String, attributes As Dictionary(Of String, String) = Nothing) As TNodeControl
  overload: FlowR.Core.Node.Add*
  implements:
  - FlowR.Core.INode.Add``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String})
  nameWithType.vb: Node.Add(Of TNodeControl)(String, Dictionary(Of String, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FlowR.Core.Node.Add(Of TNodeControl)(System.String, System.Collections.Generic.Dictionary(Of System.String, System.String))
  name.vb: Add(Of TNodeControl)(String, Dictionary(Of String, String))
- uid: FlowR.Core.Node.Remove(FlowR.Core.INode)
  commentId: M:FlowR.Core.Node.Remove(FlowR.Core.INode)
  id: Remove(FlowR.Core.INode)
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: Remove(INode)
  nameWithType: Node.Remove(INode)
  fullName: FlowR.Core.Node.Remove(FlowR.Core.INode)
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: Remove
    path: ../FlowR.Core/Node.cs
    startLine: 253
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nRemove child.\n"
  example: []
  syntax:
    content: public void Remove(INode child)
    parameters:
    - id: child
      type: FlowR.Core.INode
      description: ''
    content.vb: Public Sub Remove(child As INode)
  overload: FlowR.Core.Node.Remove*
  implements:
  - FlowR.Core.INode.Remove(FlowR.Core.INode)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FlowR.Core.Node.On(System.String,System.EventHandler)
  commentId: M:FlowR.Core.Node.On(System.String,System.EventHandler)
  id: On(System.String,System.EventHandler)
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: On(String, EventHandler)
  nameWithType: Node.On(String, EventHandler)
  fullName: FlowR.Core.Node.On(System.String, System.EventHandler)
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: On
    path: ../FlowR.Core/Node.cs
    startLine: 259
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nStart Listen for specified eventName.\n"
  example: []
  syntax:
    content: public virtual INode On(string eventName, EventHandler handler)
    parameters:
    - id: eventName
      type: System.String
      description: ''
    - id: handler
      type: System.EventHandler
      description: ''
    return:
      type: FlowR.Core.INode
    content.vb: Public Overridable Function On(eventName As String, handler As EventHandler) As INode
  overload: FlowR.Core.Node.On*
  implements:
  - FlowR.Core.INode.On(System.String,System.EventHandler)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: FlowR.Core.Node.Off(System.String,System.EventHandler)
  commentId: M:FlowR.Core.Node.Off(System.String,System.EventHandler)
  id: Off(System.String,System.EventHandler)
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: Off(String, EventHandler)
  nameWithType: Node.Off(String, EventHandler)
  fullName: FlowR.Core.Node.Off(System.String, System.EventHandler)
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: Off
    path: ../FlowR.Core/Node.cs
    startLine: 278
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nStop Listen for specified eventName and handler.\n"
  example: []
  syntax:
    content: public virtual INode Off(string eventName, EventHandler handler)
    parameters:
    - id: eventName
      type: System.String
      description: ''
    - id: handler
      type: System.EventHandler
      description: ''
    return:
      type: FlowR.Core.INode
    content.vb: Public Overridable Function Off(eventName As String, handler As EventHandler) As INode
  overload: FlowR.Core.Node.Off*
  implements:
  - FlowR.Core.INode.Off(System.String,System.EventHandler)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: FlowR.Core.Node.Off(System.String)
  commentId: M:FlowR.Core.Node.Off(System.String)
  id: Off(System.String)
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: Off(String)
  nameWithType: Node.Off(String)
  fullName: FlowR.Core.Node.Off(System.String)
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: Off
    path: ../FlowR.Core/Node.cs
    startLine: 296
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nStop Listen for specified eventName.\n"
  example: []
  syntax:
    content: public virtual INode Off(string eventName)
    parameters:
    - id: eventName
      type: System.String
      description: ''
    return:
      type: FlowR.Core.INode
    content.vb: Public Overridable Function Off(eventName As String) As INode
  overload: FlowR.Core.Node.Off*
  implements:
  - FlowR.Core.INode.Off(System.String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: FlowR.Core.Node.OnClientEventTriggered(System.String,System.EventArgs)
  commentId: M:FlowR.Core.Node.OnClientEventTriggered(System.String,System.EventArgs)
  id: OnClientEventTriggered(System.String,System.EventArgs)
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: OnClientEventTriggered(String, EventArgs)
  nameWithType: Node.OnClientEventTriggered(String, EventArgs)
  fullName: FlowR.Core.Node.OnClientEventTriggered(System.String, System.EventArgs)
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: OnClientEventTriggered
    path: ../FlowR.Core/Node.cs
    startLine: 304
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nHandle incoming Node Event fired from client.\n"
  remarks: Never use this. This is called from application on incoming events
  example: []
  syntax:
    content: public void OnClientEventTriggered(string eventName, EventArgs eventArgs)
    parameters:
    - id: eventName
      type: System.String
      description: ''
    - id: eventArgs
      type: System.EventArgs
      description: ''
    content.vb: Public Sub OnClientEventTriggered(eventName As String, eventArgs As EventArgs)
  overload: FlowR.Core.Node.OnClientEventTriggered*
  implements:
  - FlowR.Core.INode.OnClientEventTriggered(System.String,System.EventArgs)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FlowR.Core.Node.AddJavascriptMethod(System.String,System.String)
  commentId: M:FlowR.Core.Node.AddJavascriptMethod(System.String,System.String)
  id: AddJavascriptMethod(System.String,System.String)
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: AddJavascriptMethod(String, String)
  nameWithType: Node.AddJavascriptMethod(String, String)
  fullName: FlowR.Core.Node.AddJavascriptMethod(System.String, System.String)
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: AddJavascriptMethod
    path: ../FlowR.Core/Node.cs
    startLine: 312
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nAdd a method to the node, don&apos;t wait for response.\nLater can be called via CallClientMethod and CallClientMethodWaitResponse\n"
  example: []
  syntax:
    content: public virtual INode AddJavascriptMethod(string methodName, string jsStatement)
    parameters:
    - id: methodName
      type: System.String
      description: ''
    - id: jsStatement
      type: System.String
      description: ''
    return:
      type: FlowR.Core.INode
    content.vb: Public Overridable Function AddJavascriptMethod(methodName As String, jsStatement As String) As INode
  overload: FlowR.Core.Node.AddJavascriptMethod*
  implements:
  - FlowR.Core.INode.AddJavascriptMethod(System.String,System.String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: FlowR.Core.Node.CallClientMethod(System.String,System.String[])
  commentId: M:FlowR.Core.Node.CallClientMethod(System.String,System.String[])
  id: CallClientMethod(System.String,System.String[])
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: CallClientMethod(String, String[])
  nameWithType: Node.CallClientMethod(String, String[])
  fullName: FlowR.Core.Node.CallClientMethod(System.String, System.String[])
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: CallClientMethod
    path: ../FlowR.Core/Node.cs
    startLine: 324
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nCall a method on client side on this node with arguments, don&apos;t wait for response.\n"
  example: []
  syntax:
    content: public virtual INode CallClientMethod(string methodName, params string[] arguments)
    parameters:
    - id: methodName
      type: System.String
      description: ''
    - id: arguments
      type: System.String[]
      description: ''
    return:
      type: FlowR.Core.INode
    content.vb: Public Overridable Function CallClientMethod(methodName As String, ParamArray arguments As String()) As INode
  overload: FlowR.Core.Node.CallClientMethod*
  implements:
  - FlowR.Core.INode.CallClientMethod(System.String,System.String[])
  nameWithType.vb: Node.CallClientMethod(String, String())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: FlowR.Core.Node.CallClientMethod(System.String, System.String())
  name.vb: CallClientMethod(String, String())
- uid: FlowR.Core.Node.CallClientMethodAsync(System.String,System.String[])
  commentId: M:FlowR.Core.Node.CallClientMethodAsync(System.String,System.String[])
  id: CallClientMethodAsync(System.String,System.String[])
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: CallClientMethodAsync(String, String[])
  nameWithType: Node.CallClientMethodAsync(String, String[])
  fullName: FlowR.Core.Node.CallClientMethodAsync(System.String, System.String[])
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: CallClientMethodAsync
    path: ../FlowR.Core/Node.cs
    startLine: 336
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nReturn Response after call a method on client side on this node with arguments.\n"
  example: []
  syntax:
    content: public Task<string> CallClientMethodAsync(string methodName, params string[] arguments)
    parameters:
    - id: methodName
      type: System.String
      description: ''
    - id: arguments
      type: System.String[]
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: ''
    content.vb: Public Function CallClientMethodAsync(methodName As String, ParamArray arguments As String()) As Task(Of String)
  overload: FlowR.Core.Node.CallClientMethodAsync*
  implements:
  - FlowR.Core.INode.CallClientMethodAsync(System.String,System.String[])
  nameWithType.vb: Node.CallClientMethodAsync(String, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FlowR.Core.Node.CallClientMethodAsync(System.String, System.String())
  name.vb: CallClientMethodAsync(String, String())
- uid: FlowR.Core.Node.GetFirstOwnerOfType``1
  commentId: M:FlowR.Core.Node.GetFirstOwnerOfType``1
  id: GetFirstOwnerOfType``1
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: GetFirstOwnerOfType<T>()
  nameWithType: Node.GetFirstOwnerOfType<T>()
  fullName: FlowR.Core.Node.GetFirstOwnerOfType<T>()
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: GetFirstOwnerOfType
    path: ../FlowR.Core/Node.cs
    startLine: 347
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nGet First INode of a specific type\n(eg. A Control get first Form Owner)\n"
  example: []
  syntax:
    content: >-
      public T GetFirstOwnerOfType<T>()
          where T : INode
    typeParameters:
    - id: T
      description: ''
    return:
      type: '{T}'
      description: ''
    content.vb: Public Function GetFirstOwnerOfType(Of T As INode) As T
  overload: FlowR.Core.Node.GetFirstOwnerOfType*
  implements:
  - FlowR.Core.INode.GetFirstOwnerOfType``1
  nameWithType.vb: Node.GetFirstOwnerOfType(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FlowR.Core.Node.GetFirstOwnerOfType(Of T)()
  name.vb: GetFirstOwnerOfType(Of T)()
- uid: FlowR.Core.Node.GetChildrenOfType``1
  commentId: M:FlowR.Core.Node.GetChildrenOfType``1
  id: GetChildrenOfType``1
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: GetChildrenOfType<T>()
  nameWithType: Node.GetChildrenOfType<T>()
  fullName: FlowR.Core.Node.GetChildrenOfType<T>()
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: GetChildrenOfType
    path: ../FlowR.Core/Node.cs
    startLine: 370
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nGet All children of a specific type\n"
  example: []
  syntax:
    content: >-
      public List<T> GetChildrenOfType<T>()
          where T : INode
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Collections.Generic.List{{T}}
      description: ''
    content.vb: Public Function GetChildrenOfType(Of T As INode) As List(Of T)
  overload: FlowR.Core.Node.GetChildrenOfType*
  implements:
  - FlowR.Core.INode.GetChildrenOfType``1
  nameWithType.vb: Node.GetChildrenOfType(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FlowR.Core.Node.GetChildrenOfType(Of T)()
  name.vb: GetChildrenOfType(Of T)()
- uid: FlowR.Core.Node.AddCssClass(System.String)
  commentId: M:FlowR.Core.Node.AddCssClass(System.String)
  id: AddCssClass(System.String)
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: AddCssClass(String)
  nameWithType: Node.AddCssClass(String)
  fullName: FlowR.Core.Node.AddCssClass(System.String)
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: AddCssClass
    path: ../FlowR.Core/Node.cs
    startLine: 382
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nAdd a classname to class attribute\n"
  example: []
  syntax:
    content: public virtual INode AddCssClass(string className)
    parameters:
    - id: className
      type: System.String
      description: ''
    return:
      type: FlowR.Core.INode
      description: ''
    content.vb: Public Overridable Function AddCssClass(className As String) As INode
  overload: FlowR.Core.Node.AddCssClass*
  implements:
  - FlowR.Core.INode.AddCssClass(System.String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: FlowR.Core.Node.RemoveCssClass(System.String)
  commentId: M:FlowR.Core.Node.RemoveCssClass(System.String)
  id: RemoveCssClass(System.String)
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: RemoveCssClass(String)
  nameWithType: Node.RemoveCssClass(String)
  fullName: FlowR.Core.Node.RemoveCssClass(System.String)
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: RemoveCssClass
    path: ../FlowR.Core/Node.cs
    startLine: 396
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nRemove a classname from class attribute\n"
  example: []
  syntax:
    content: public virtual INode RemoveCssClass(string className)
    parameters:
    - id: className
      type: System.String
      description: ''
    return:
      type: FlowR.Core.INode
      description: ''
    content.vb: Public Overridable Function RemoveCssClass(className As String) As INode
  overload: FlowR.Core.Node.RemoveCssClass*
  implements:
  - FlowR.Core.INode.RemoveCssClass(System.String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: FlowR.Core.Node.SetUuid(System.String)
  commentId: M:FlowR.Core.Node.SetUuid(System.String)
  id: SetUuid(System.String)
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: SetUuid(String)
  nameWithType: Node.SetUuid(String)
  fullName: FlowR.Core.Node.SetUuid(System.String)
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: SetUuid
    path: ../FlowR.Core/Node.cs
    startLine: 416
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nSet Uuid, under the hood will call SetAttribute(id, Uuid)\n"
  example: []
  syntax:
    content: protected void SetUuid(string uuid)
    parameters:
    - id: uuid
      type: System.String
      description: ''
    content.vb: Protected Sub SetUuid(uuid As String)
  overload: FlowR.Core.Node.SetUuid*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: FlowR.Core.Node.SetApplication(FlowR.Core.Application)
  commentId: M:FlowR.Core.Node.SetApplication(FlowR.Core.Application)
  id: SetApplication(FlowR.Core.Application)
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: SetApplication(Application)
  nameWithType: Node.SetApplication(Application)
  fullName: FlowR.Core.Node.SetApplication(FlowR.Core.Application)
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: SetApplication
    path: ../FlowR.Core/Node.cs
    startLine: 433
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\n[internal use] Set Application from owner on init.\n"
  example: []
  syntax:
    content: protected void SetApplication(Application app)
    parameters:
    - id: app
      type: FlowR.Core.Application
      description: ''
    content.vb: Protected Sub SetApplication(app As Application)
  overload: FlowR.Core.Node.SetApplication*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: FlowR.Core.Node.ValidateNode
  commentId: M:FlowR.Core.Node.ValidateNode
  id: ValidateNode
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: ValidateNode()
  nameWithType: Node.ValidateNode()
  fullName: FlowR.Core.Node.ValidateNode()
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: ValidateNode
    path: ../FlowR.Core/Node.cs
    startLine: 576
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nValidate Node before call init\n"
  example: []
  syntax:
    content: protected virtual void ValidateNode()
    content.vb: Protected Overridable Sub ValidateNode
  overload: FlowR.Core.Node.ValidateNode*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: FlowR.Core.Node.GetLogger
  commentId: M:FlowR.Core.Node.GetLogger
  id: GetLogger
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: GetLogger()
  nameWithType: Node.GetLogger()
  fullName: FlowR.Core.Node.GetLogger()
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: GetLogger
    path: ../FlowR.Core/Node.cs
    startLine: 598
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nGet Application logger\n"
  example: []
  syntax:
    content: public ILogger<Application> GetLogger()
    return:
      type: Microsoft.Extensions.Logging.ILogger{FlowR.Core.Application}
      description: ''
    content.vb: Public Function GetLogger As ILogger(Of Application)
  overload: FlowR.Core.Node.GetLogger*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: FlowR.Core
  commentId: N:FlowR.Core
  name: FlowR.Core
  nameWithType: FlowR.Core
  fullName: FlowR.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: FlowR.Core.INode
  commentId: T:FlowR.Core.INode
  parent: FlowR.Core
  name: INode
  nameWithType: INode
  fullName: FlowR.Core.INode
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: FlowR.Core.Node.#ctor*
  commentId: Overload:FlowR.Core.Node.#ctor
  name: Node
  nameWithType: Node.Node
  fullName: FlowR.Core.Node.Node
- uid: FlowR.Core.Node.DefaultAttributes*
  commentId: Overload:FlowR.Core.Node.DefaultAttributes
  name: DefaultAttributes
  nameWithType: Node.DefaultAttributes
  fullName: FlowR.Core.Node.DefaultAttributes
- uid: System.Collections.Generic.Dictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, String>
  nameWithType: Dictionary<String, String>
  fullName: System.Collections.Generic.Dictionary<System.String, System.String>
  nameWithType.vb: Dictionary(Of String, String)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.String)
  name.vb: Dictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: FlowR.Core.Node.TagName*
  commentId: Overload:FlowR.Core.Node.TagName
  name: TagName
  nameWithType: Node.TagName
  fullName: FlowR.Core.Node.TagName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: FlowR.Core.Node.GetTagName*
  commentId: Overload:FlowR.Core.Node.GetTagName
  name: GetTagName
  nameWithType: Node.GetTagName
  fullName: FlowR.Core.Node.GetTagName
- uid: FlowR.Core.INode.GetTagName
  commentId: M:FlowR.Core.INode.GetTagName
  parent: FlowR.Core.INode
  name: GetTagName()
  nameWithType: INode.GetTagName()
  fullName: FlowR.Core.INode.GetTagName()
  spec.csharp:
  - uid: FlowR.Core.INode.GetTagName
    name: GetTagName
    nameWithType: INode.GetTagName
    fullName: FlowR.Core.INode.GetTagName
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FlowR.Core.INode.GetTagName
    name: GetTagName
    nameWithType: INode.GetTagName
    fullName: FlowR.Core.INode.GetTagName
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: FlowR.Core.Node.GetOwner*
  commentId: Overload:FlowR.Core.Node.GetOwner
  name: GetOwner
  nameWithType: Node.GetOwner
  fullName: FlowR.Core.Node.GetOwner
- uid: FlowR.Core.INode.GetOwner
  commentId: M:FlowR.Core.INode.GetOwner
  parent: FlowR.Core.INode
  name: GetOwner()
  nameWithType: INode.GetOwner()
  fullName: FlowR.Core.INode.GetOwner()
  spec.csharp:
  - uid: FlowR.Core.INode.GetOwner
    name: GetOwner
    nameWithType: INode.GetOwner
    fullName: FlowR.Core.INode.GetOwner
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FlowR.Core.INode.GetOwner
    name: GetOwner
    nameWithType: INode.GetOwner
    fullName: FlowR.Core.INode.GetOwner
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: FlowR.Core.Node.SetOwner*
  commentId: Overload:FlowR.Core.Node.SetOwner
  name: SetOwner
  nameWithType: Node.SetOwner
  fullName: FlowR.Core.Node.SetOwner
- uid: FlowR.Core.INode.SetOwner(FlowR.Core.INode)
  commentId: M:FlowR.Core.INode.SetOwner(FlowR.Core.INode)
  parent: FlowR.Core.INode
  name: SetOwner(INode)
  nameWithType: INode.SetOwner(INode)
  fullName: FlowR.Core.INode.SetOwner(FlowR.Core.INode)
  spec.csharp:
  - uid: FlowR.Core.INode.SetOwner(FlowR.Core.INode)
    name: SetOwner
    nameWithType: INode.SetOwner
    fullName: FlowR.Core.INode.SetOwner
  - name: (
    nameWithType: (
    fullName: (
  - uid: FlowR.Core.INode
    name: INode
    nameWithType: INode
    fullName: FlowR.Core.INode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FlowR.Core.INode.SetOwner(FlowR.Core.INode)
    name: SetOwner
    nameWithType: INode.SetOwner
    fullName: FlowR.Core.INode.SetOwner
  - name: (
    nameWithType: (
    fullName: (
  - uid: FlowR.Core.INode
    name: INode
    nameWithType: INode
    fullName: FlowR.Core.INode
  - name: )
    nameWithType: )
    fullName: )
- uid: FlowR.Core.Node.GetUuid*
  commentId: Overload:FlowR.Core.Node.GetUuid
  name: GetUuid
  nameWithType: Node.GetUuid
  fullName: FlowR.Core.Node.GetUuid
- uid: FlowR.Core.INode.GetUuid
  commentId: M:FlowR.Core.INode.GetUuid
  parent: FlowR.Core.INode
  name: GetUuid()
  nameWithType: INode.GetUuid()
  fullName: FlowR.Core.INode.GetUuid()
  spec.csharp:
  - uid: FlowR.Core.INode.GetUuid
    name: GetUuid
    nameWithType: INode.GetUuid
    fullName: FlowR.Core.INode.GetUuid
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FlowR.Core.INode.GetUuid
    name: GetUuid
    nameWithType: INode.GetUuid
    fullName: FlowR.Core.INode.GetUuid
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: FlowR.Core.Node.GetAttributes*
  commentId: Overload:FlowR.Core.Node.GetAttributes
  name: GetAttributes
  nameWithType: Node.GetAttributes
  fullName: FlowR.Core.Node.GetAttributes
- uid: FlowR.Core.INode.GetAttributes
  commentId: M:FlowR.Core.INode.GetAttributes
  parent: FlowR.Core.INode
  name: GetAttributes()
  nameWithType: INode.GetAttributes()
  fullName: FlowR.Core.INode.GetAttributes()
  spec.csharp:
  - uid: FlowR.Core.INode.GetAttributes
    name: GetAttributes
    nameWithType: INode.GetAttributes
    fullName: FlowR.Core.INode.GetAttributes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FlowR.Core.INode.GetAttributes
    name: GetAttributes
    nameWithType: INode.GetAttributes
    fullName: FlowR.Core.INode.GetAttributes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: FlowR.Core.ObservableDictionary{System.String,System.String}
  commentId: T:FlowR.Core.ObservableDictionary{System.String,System.String}
  parent: FlowR.Core
  definition: FlowR.Core.ObservableDictionary`2
  name: ObservableDictionary<String, String>
  nameWithType: ObservableDictionary<String, String>
  fullName: FlowR.Core.ObservableDictionary<System.String, System.String>
  nameWithType.vb: ObservableDictionary(Of String, String)
  fullName.vb: FlowR.Core.ObservableDictionary(Of System.String, System.String)
  name.vb: ObservableDictionary(Of String, String)
  spec.csharp:
  - uid: FlowR.Core.ObservableDictionary`2
    name: ObservableDictionary
    nameWithType: ObservableDictionary
    fullName: FlowR.Core.ObservableDictionary
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: FlowR.Core.ObservableDictionary`2
    name: ObservableDictionary
    nameWithType: ObservableDictionary
    fullName: FlowR.Core.ObservableDictionary
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: FlowR.Core.ObservableDictionary`2
  commentId: T:FlowR.Core.ObservableDictionary`2
  name: ObservableDictionary<TKey, TValue>
  nameWithType: ObservableDictionary<TKey, TValue>
  fullName: FlowR.Core.ObservableDictionary<TKey, TValue>
  nameWithType.vb: ObservableDictionary(Of TKey, TValue)
  fullName.vb: FlowR.Core.ObservableDictionary(Of TKey, TValue)
  name.vb: ObservableDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: FlowR.Core.ObservableDictionary`2
    name: ObservableDictionary
    nameWithType: ObservableDictionary
    fullName: FlowR.Core.ObservableDictionary
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: FlowR.Core.ObservableDictionary`2
    name: ObservableDictionary
    nameWithType: ObservableDictionary
    fullName: FlowR.Core.ObservableDictionary
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: FlowR.Core.Node.GetProperties*
  commentId: Overload:FlowR.Core.Node.GetProperties
  name: GetProperties
  nameWithType: Node.GetProperties
  fullName: FlowR.Core.Node.GetProperties
- uid: FlowR.Core.INode.GetProperties
  commentId: M:FlowR.Core.INode.GetProperties
  parent: FlowR.Core.INode
  name: GetProperties()
  nameWithType: INode.GetProperties()
  fullName: FlowR.Core.INode.GetProperties()
  spec.csharp:
  - uid: FlowR.Core.INode.GetProperties
    name: GetProperties
    nameWithType: INode.GetProperties
    fullName: FlowR.Core.INode.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FlowR.Core.INode.GetProperties
    name: GetProperties
    nameWithType: INode.GetProperties
    fullName: FlowR.Core.INode.GetProperties
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: FlowR.Core.Node.GetEventHandlers*
  commentId: Overload:FlowR.Core.Node.GetEventHandlers
  name: GetEventHandlers
  nameWithType: Node.GetEventHandlers
  fullName: FlowR.Core.Node.GetEventHandlers
- uid: FlowR.Core.INode.GetEventHandlers
  commentId: M:FlowR.Core.INode.GetEventHandlers
  parent: FlowR.Core.INode
  name: GetEventHandlers()
  nameWithType: INode.GetEventHandlers()
  fullName: FlowR.Core.INode.GetEventHandlers()
  spec.csharp:
  - uid: FlowR.Core.INode.GetEventHandlers
    name: GetEventHandlers
    nameWithType: INode.GetEventHandlers
    fullName: FlowR.Core.INode.GetEventHandlers
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FlowR.Core.INode.GetEventHandlers
    name: GetEventHandlers
    nameWithType: INode.GetEventHandlers
    fullName: FlowR.Core.INode.GetEventHandlers
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: FlowR.Core.ObservableDictionary{System.String,System.Collections.Generic.List{System.EventHandler}}
  commentId: T:FlowR.Core.ObservableDictionary{System.String,System.Collections.Generic.List{System.EventHandler}}
  parent: FlowR.Core
  definition: FlowR.Core.ObservableDictionary`2
  name: ObservableDictionary<String, List<EventHandler>>
  nameWithType: ObservableDictionary<String, List<EventHandler>>
  fullName: FlowR.Core.ObservableDictionary<System.String, System.Collections.Generic.List<System.EventHandler>>
  nameWithType.vb: ObservableDictionary(Of String, List(Of EventHandler))
  fullName.vb: FlowR.Core.ObservableDictionary(Of System.String, System.Collections.Generic.List(Of System.EventHandler))
  name.vb: ObservableDictionary(Of String, List(Of EventHandler))
  spec.csharp:
  - uid: FlowR.Core.ObservableDictionary`2
    name: ObservableDictionary
    nameWithType: ObservableDictionary
    fullName: FlowR.Core.ObservableDictionary
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.EventHandler
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: FlowR.Core.ObservableDictionary`2
    name: ObservableDictionary
    nameWithType: ObservableDictionary
    fullName: FlowR.Core.ObservableDictionary
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.EventHandler
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: FlowR.Core.Node.GetApplication*
  commentId: Overload:FlowR.Core.Node.GetApplication
  name: GetApplication
  nameWithType: Node.GetApplication
  fullName: FlowR.Core.Node.GetApplication
- uid: FlowR.Core.INode.GetApplication
  commentId: M:FlowR.Core.INode.GetApplication
  parent: FlowR.Core.INode
  name: GetApplication()
  nameWithType: INode.GetApplication()
  fullName: FlowR.Core.INode.GetApplication()
  spec.csharp:
  - uid: FlowR.Core.INode.GetApplication
    name: GetApplication
    nameWithType: INode.GetApplication
    fullName: FlowR.Core.INode.GetApplication
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FlowR.Core.INode.GetApplication
    name: GetApplication
    nameWithType: INode.GetApplication
    fullName: FlowR.Core.INode.GetApplication
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: FlowR.Core.Application
  commentId: T:FlowR.Core.Application
  parent: FlowR.Core
  name: Application
  nameWithType: Application
  fullName: FlowR.Core.Application
- uid: FlowR.Core.Node.GetCommunication*
  commentId: Overload:FlowR.Core.Node.GetCommunication
  name: GetCommunication
  nameWithType: Node.GetCommunication
  fullName: FlowR.Core.Node.GetCommunication
- uid: FlowR.Core.INode.GetCommunication
  commentId: M:FlowR.Core.INode.GetCommunication
  parent: FlowR.Core.INode
  name: GetCommunication()
  nameWithType: INode.GetCommunication()
  fullName: FlowR.Core.INode.GetCommunication()
  spec.csharp:
  - uid: FlowR.Core.INode.GetCommunication
    name: GetCommunication
    nameWithType: INode.GetCommunication
    fullName: FlowR.Core.INode.GetCommunication
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FlowR.Core.INode.GetCommunication
    name: GetCommunication
    nameWithType: INode.GetCommunication
    fullName: FlowR.Core.INode.GetCommunication
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: FlowR.Core.ApplicationCommunication
  commentId: T:FlowR.Core.ApplicationCommunication
  parent: FlowR.Core
  name: ApplicationCommunication
  nameWithType: ApplicationCommunication
  fullName: FlowR.Core.ApplicationCommunication
- uid: FlowR.Core.Node.GetChildren*
  commentId: Overload:FlowR.Core.Node.GetChildren
  name: GetChildren
  nameWithType: Node.GetChildren
  fullName: FlowR.Core.Node.GetChildren
- uid: FlowR.Core.INode.GetChildren
  commentId: M:FlowR.Core.INode.GetChildren
  parent: FlowR.Core.INode
  name: GetChildren()
  nameWithType: INode.GetChildren()
  fullName: FlowR.Core.INode.GetChildren()
  spec.csharp:
  - uid: FlowR.Core.INode.GetChildren
    name: GetChildren
    nameWithType: INode.GetChildren
    fullName: FlowR.Core.INode.GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FlowR.Core.INode.GetChildren
    name: GetChildren
    nameWithType: INode.GetChildren
    fullName: FlowR.Core.INode.GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: FlowR.Core.ObservableDictionary{System.String,FlowR.Core.INode}
  commentId: T:FlowR.Core.ObservableDictionary{System.String,FlowR.Core.INode}
  parent: FlowR.Core
  definition: FlowR.Core.ObservableDictionary`2
  name: ObservableDictionary<String, INode>
  nameWithType: ObservableDictionary<String, INode>
  fullName: FlowR.Core.ObservableDictionary<System.String, FlowR.Core.INode>
  nameWithType.vb: ObservableDictionary(Of String, INode)
  fullName.vb: FlowR.Core.ObservableDictionary(Of System.String, FlowR.Core.INode)
  name.vb: ObservableDictionary(Of String, INode)
  spec.csharp:
  - uid: FlowR.Core.ObservableDictionary`2
    name: ObservableDictionary
    nameWithType: ObservableDictionary
    fullName: FlowR.Core.ObservableDictionary
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: FlowR.Core.INode
    name: INode
    nameWithType: INode
    fullName: FlowR.Core.INode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: FlowR.Core.ObservableDictionary`2
    name: ObservableDictionary
    nameWithType: ObservableDictionary
    fullName: FlowR.Core.ObservableDictionary
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: FlowR.Core.INode
    name: INode
    nameWithType: INode
    fullName: FlowR.Core.INode
  - name: )
    nameWithType: )
    fullName: )
- uid: FlowR.Core.Node.GetText*
  commentId: Overload:FlowR.Core.Node.GetText
  name: GetText
  nameWithType: Node.GetText
  fullName: FlowR.Core.Node.GetText
- uid: FlowR.Core.INode.GetText
  commentId: M:FlowR.Core.INode.GetText
  parent: FlowR.Core.INode
  name: GetText()
  nameWithType: INode.GetText()
  fullName: FlowR.Core.INode.GetText()
  spec.csharp:
  - uid: FlowR.Core.INode.GetText
    name: GetText
    nameWithType: INode.GetText
    fullName: FlowR.Core.INode.GetText
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FlowR.Core.INode.GetText
    name: GetText
    nameWithType: INode.GetText
    fullName: FlowR.Core.INode.GetText
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: FlowR.Core.Node.SetText*
  commentId: Overload:FlowR.Core.Node.SetText
  name: SetText
  nameWithType: Node.SetText
  fullName: FlowR.Core.Node.SetText
- uid: FlowR.Core.INode.SetText(System.String)
  commentId: M:FlowR.Core.INode.SetText(System.String)
  parent: FlowR.Core.INode
  isExternal: true
  name: SetText(String)
  nameWithType: INode.SetText(String)
  fullName: FlowR.Core.INode.SetText(System.String)
  spec.csharp:
  - uid: FlowR.Core.INode.SetText(System.String)
    name: SetText
    nameWithType: INode.SetText
    fullName: FlowR.Core.INode.SetText
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FlowR.Core.INode.SetText(System.String)
    name: SetText
    nameWithType: INode.SetText
    fullName: FlowR.Core.INode.SetText
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: FlowR.Core.Node.Init*
  commentId: Overload:FlowR.Core.Node.Init
  name: Init
  nameWithType: Node.Init
  fullName: FlowR.Core.Node.Init
- uid: FlowR.Core.INode.Init
  commentId: M:FlowR.Core.INode.Init
  parent: FlowR.Core.INode
  name: Init()
  nameWithType: INode.Init()
  fullName: FlowR.Core.INode.Init()
  spec.csharp:
  - uid: FlowR.Core.INode.Init
    name: Init
    nameWithType: INode.Init
    fullName: FlowR.Core.INode.Init
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FlowR.Core.INode.Init
    name: Init
    nameWithType: INode.Init
    fullName: FlowR.Core.INode.Init
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: FlowR.Core.Node.SetAttribute*
  commentId: Overload:FlowR.Core.Node.SetAttribute
  name: SetAttribute
  nameWithType: Node.SetAttribute
  fullName: FlowR.Core.Node.SetAttribute
- uid: FlowR.Core.INode.SetAttribute(System.String,System.String)
  commentId: M:FlowR.Core.INode.SetAttribute(System.String,System.String)
  parent: FlowR.Core.INode
  isExternal: true
  name: SetAttribute(String, String)
  nameWithType: INode.SetAttribute(String, String)
  fullName: FlowR.Core.INode.SetAttribute(System.String, System.String)
  spec.csharp:
  - uid: FlowR.Core.INode.SetAttribute(System.String,System.String)
    name: SetAttribute
    nameWithType: INode.SetAttribute
    fullName: FlowR.Core.INode.SetAttribute
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FlowR.Core.INode.SetAttribute(System.String,System.String)
    name: SetAttribute
    nameWithType: INode.SetAttribute
    fullName: FlowR.Core.INode.SetAttribute
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: FlowR.Core.Node.GetAttribute*
  commentId: Overload:FlowR.Core.Node.GetAttribute
  name: GetAttribute
  nameWithType: Node.GetAttribute
  fullName: FlowR.Core.Node.GetAttribute
- uid: FlowR.Core.INode.GetAttribute(System.String)
  commentId: M:FlowR.Core.INode.GetAttribute(System.String)
  parent: FlowR.Core.INode
  isExternal: true
  name: GetAttribute(String)
  nameWithType: INode.GetAttribute(String)
  fullName: FlowR.Core.INode.GetAttribute(System.String)
  spec.csharp:
  - uid: FlowR.Core.INode.GetAttribute(System.String)
    name: GetAttribute
    nameWithType: INode.GetAttribute
    fullName: FlowR.Core.INode.GetAttribute
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FlowR.Core.INode.GetAttribute(System.String)
    name: GetAttribute
    nameWithType: INode.GetAttribute
    fullName: FlowR.Core.INode.GetAttribute
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: FlowR.Core.Node.RemoveAttribute*
  commentId: Overload:FlowR.Core.Node.RemoveAttribute
  name: RemoveAttribute
  nameWithType: Node.RemoveAttribute
  fullName: FlowR.Core.Node.RemoveAttribute
- uid: FlowR.Core.INode.RemoveAttribute(System.String)
  commentId: M:FlowR.Core.INode.RemoveAttribute(System.String)
  parent: FlowR.Core.INode
  isExternal: true
  name: RemoveAttribute(String)
  nameWithType: INode.RemoveAttribute(String)
  fullName: FlowR.Core.INode.RemoveAttribute(System.String)
  spec.csharp:
  - uid: FlowR.Core.INode.RemoveAttribute(System.String)
    name: RemoveAttribute
    nameWithType: INode.RemoveAttribute
    fullName: FlowR.Core.INode.RemoveAttribute
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FlowR.Core.INode.RemoveAttribute(System.String)
    name: RemoveAttribute
    nameWithType: INode.RemoveAttribute
    fullName: FlowR.Core.INode.RemoveAttribute
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: FlowR.Core.INode.SetAttribute(System.Collections.Generic.Dictionary{System.String,System.String})
  commentId: M:FlowR.Core.INode.SetAttribute(System.Collections.Generic.Dictionary{System.String,System.String})
  parent: FlowR.Core.INode
  isExternal: true
  name: SetAttribute(Dictionary<String, String>)
  nameWithType: INode.SetAttribute(Dictionary<String, String>)
  fullName: FlowR.Core.INode.SetAttribute(System.Collections.Generic.Dictionary<System.String, System.String>)
  nameWithType.vb: INode.SetAttribute(Dictionary(Of String, String))
  fullName.vb: FlowR.Core.INode.SetAttribute(System.Collections.Generic.Dictionary(Of System.String, System.String))
  name.vb: SetAttribute(Dictionary(Of String, String))
  spec.csharp:
  - uid: FlowR.Core.INode.SetAttribute(System.Collections.Generic.Dictionary{System.String,System.String})
    name: SetAttribute
    nameWithType: INode.SetAttribute
    fullName: FlowR.Core.INode.SetAttribute
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FlowR.Core.INode.SetAttribute(System.Collections.Generic.Dictionary{System.String,System.String})
    name: SetAttribute
    nameWithType: INode.SetAttribute
    fullName: FlowR.Core.INode.SetAttribute
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: FlowR.Core.Node.HasAttribute*
  commentId: Overload:FlowR.Core.Node.HasAttribute
  name: HasAttribute
  nameWithType: Node.HasAttribute
  fullName: FlowR.Core.Node.HasAttribute
- uid: FlowR.Core.INode.HasAttribute(System.String)
  commentId: M:FlowR.Core.INode.HasAttribute(System.String)
  parent: FlowR.Core.INode
  isExternal: true
  name: HasAttribute(String)
  nameWithType: INode.HasAttribute(String)
  fullName: FlowR.Core.INode.HasAttribute(System.String)
  spec.csharp:
  - uid: FlowR.Core.INode.HasAttribute(System.String)
    name: HasAttribute
    nameWithType: INode.HasAttribute
    fullName: FlowR.Core.INode.HasAttribute
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FlowR.Core.INode.HasAttribute(System.String)
    name: HasAttribute
    nameWithType: INode.HasAttribute
    fullName: FlowR.Core.INode.HasAttribute
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: FlowR.Core.Node.SetProperty*
  commentId: Overload:FlowR.Core.Node.SetProperty
  name: SetProperty
  nameWithType: Node.SetProperty
  fullName: FlowR.Core.Node.SetProperty
- uid: FlowR.Core.INode.SetProperty(System.String,System.String)
  commentId: M:FlowR.Core.INode.SetProperty(System.String,System.String)
  parent: FlowR.Core.INode
  isExternal: true
  name: SetProperty(String, String)
  nameWithType: INode.SetProperty(String, String)
  fullName: FlowR.Core.INode.SetProperty(System.String, System.String)
  spec.csharp:
  - uid: FlowR.Core.INode.SetProperty(System.String,System.String)
    name: SetProperty
    nameWithType: INode.SetProperty
    fullName: FlowR.Core.INode.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FlowR.Core.INode.SetProperty(System.String,System.String)
    name: SetProperty
    nameWithType: INode.SetProperty
    fullName: FlowR.Core.INode.SetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: FlowR.Core.Node.GetProperty*
  commentId: Overload:FlowR.Core.Node.GetProperty
  name: GetProperty
  nameWithType: Node.GetProperty
  fullName: FlowR.Core.Node.GetProperty
- uid: FlowR.Core.INode.GetProperty(System.String)
  commentId: M:FlowR.Core.INode.GetProperty(System.String)
  parent: FlowR.Core.INode
  isExternal: true
  name: GetProperty(String)
  nameWithType: INode.GetProperty(String)
  fullName: FlowR.Core.INode.GetProperty(System.String)
  spec.csharp:
  - uid: FlowR.Core.INode.GetProperty(System.String)
    name: GetProperty
    nameWithType: INode.GetProperty
    fullName: FlowR.Core.INode.GetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FlowR.Core.INode.GetProperty(System.String)
    name: GetProperty
    nameWithType: INode.GetProperty
    fullName: FlowR.Core.INode.GetProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: FlowR.Core.Node.GetPropertyAsync*
  commentId: Overload:FlowR.Core.Node.GetPropertyAsync
  name: GetPropertyAsync
  nameWithType: Node.GetPropertyAsync
  fullName: FlowR.Core.Node.GetPropertyAsync
- uid: FlowR.Core.INode.GetPropertyAsync(System.String)
  commentId: M:FlowR.Core.INode.GetPropertyAsync(System.String)
  parent: FlowR.Core.INode
  isExternal: true
  name: GetPropertyAsync(String)
  nameWithType: INode.GetPropertyAsync(String)
  fullName: FlowR.Core.INode.GetPropertyAsync(System.String)
  spec.csharp:
  - uid: FlowR.Core.INode.GetPropertyAsync(System.String)
    name: GetPropertyAsync
    nameWithType: INode.GetPropertyAsync
    fullName: FlowR.Core.INode.GetPropertyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FlowR.Core.INode.GetPropertyAsync(System.String)
    name: GetPropertyAsync
    nameWithType: INode.GetPropertyAsync
    fullName: FlowR.Core.INode.GetPropertyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: FlowR.Core.Node.Add*
  commentId: Overload:FlowR.Core.Node.Add
  name: Add
  nameWithType: Node.Add
  fullName: FlowR.Core.Node.Add
- uid: FlowR.Core.INode.Add``1(System.Collections.Generic.Dictionary{System.String,System.String})
  commentId: M:FlowR.Core.INode.Add``1(System.Collections.Generic.Dictionary{System.String,System.String})
  parent: FlowR.Core.INode
  isExternal: true
  name: Add<TNodeComponent>(Dictionary<String, String>)
  nameWithType: INode.Add<TNodeComponent>(Dictionary<String, String>)
  fullName: FlowR.Core.INode.Add<TNodeComponent>(System.Collections.Generic.Dictionary<System.String, System.String>)
  nameWithType.vb: INode.Add(Of TNodeComponent)(Dictionary(Of String, String))
  fullName.vb: FlowR.Core.INode.Add(Of TNodeComponent)(System.Collections.Generic.Dictionary(Of System.String, System.String))
  name.vb: Add(Of TNodeComponent)(Dictionary(Of String, String))
  spec.csharp:
  - uid: FlowR.Core.INode.Add``1(System.Collections.Generic.Dictionary{System.String,System.String})
    name: Add<TNodeComponent>
    nameWithType: INode.Add<TNodeComponent>
    fullName: FlowR.Core.INode.Add<TNodeComponent>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FlowR.Core.INode.Add``1(System.Collections.Generic.Dictionary{System.String,System.String})
    name: Add(Of TNodeComponent)
    nameWithType: INode.Add(Of TNodeComponent)
    fullName: FlowR.Core.INode.Add(Of TNodeComponent)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TNodeComponent}'
  commentId: '!:TNodeComponent'
  definition: TNodeComponent
  name: TNodeComponent
  nameWithType: TNodeComponent
  fullName: TNodeComponent
- uid: TNodeComponent
  name: TNodeComponent
  nameWithType: TNodeComponent
  fullName: TNodeComponent
- uid: FlowR.Core.INode.Add``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String})
  commentId: M:FlowR.Core.INode.Add``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String})
  parent: FlowR.Core.INode
  isExternal: true
  name: Add<TNodeControl>(String, Dictionary<String, String>)
  nameWithType: INode.Add<TNodeControl>(String, Dictionary<String, String>)
  fullName: FlowR.Core.INode.Add<TNodeControl>(System.String, System.Collections.Generic.Dictionary<System.String, System.String>)
  nameWithType.vb: INode.Add(Of TNodeControl)(String, Dictionary(Of String, String))
  fullName.vb: FlowR.Core.INode.Add(Of TNodeControl)(System.String, System.Collections.Generic.Dictionary(Of System.String, System.String))
  name.vb: Add(Of TNodeControl)(String, Dictionary(Of String, String))
  spec.csharp:
  - uid: FlowR.Core.INode.Add``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String})
    name: Add<TNodeControl>
    nameWithType: INode.Add<TNodeControl>
    fullName: FlowR.Core.INode.Add<TNodeControl>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FlowR.Core.INode.Add``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String})
    name: Add(Of TNodeControl)
    nameWithType: INode.Add(Of TNodeControl)
    fullName: FlowR.Core.INode.Add(Of TNodeControl)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TNodeControl}'
  commentId: '!:TNodeControl'
  definition: TNodeControl
  name: TNodeControl
  nameWithType: TNodeControl
  fullName: TNodeControl
- uid: TNodeControl
  name: TNodeControl
  nameWithType: TNodeControl
  fullName: TNodeControl
- uid: FlowR.Core.Node.Remove*
  commentId: Overload:FlowR.Core.Node.Remove
  name: Remove
  nameWithType: Node.Remove
  fullName: FlowR.Core.Node.Remove
- uid: FlowR.Core.INode.Remove(FlowR.Core.INode)
  commentId: M:FlowR.Core.INode.Remove(FlowR.Core.INode)
  parent: FlowR.Core.INode
  name: Remove(INode)
  nameWithType: INode.Remove(INode)
  fullName: FlowR.Core.INode.Remove(FlowR.Core.INode)
  spec.csharp:
  - uid: FlowR.Core.INode.Remove(FlowR.Core.INode)
    name: Remove
    nameWithType: INode.Remove
    fullName: FlowR.Core.INode.Remove
  - name: (
    nameWithType: (
    fullName: (
  - uid: FlowR.Core.INode
    name: INode
    nameWithType: INode
    fullName: FlowR.Core.INode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FlowR.Core.INode.Remove(FlowR.Core.INode)
    name: Remove
    nameWithType: INode.Remove
    fullName: FlowR.Core.INode.Remove
  - name: (
    nameWithType: (
    fullName: (
  - uid: FlowR.Core.INode
    name: INode
    nameWithType: INode
    fullName: FlowR.Core.INode
  - name: )
    nameWithType: )
    fullName: )
- uid: FlowR.Core.Node.On*
  commentId: Overload:FlowR.Core.Node.On
  name: On
  nameWithType: Node.On
  fullName: FlowR.Core.Node.On
- uid: FlowR.Core.INode.On(System.String,System.EventHandler)
  commentId: M:FlowR.Core.INode.On(System.String,System.EventHandler)
  parent: FlowR.Core.INode
  isExternal: true
  name: On(String, EventHandler)
  nameWithType: INode.On(String, EventHandler)
  fullName: FlowR.Core.INode.On(System.String, System.EventHandler)
  spec.csharp:
  - uid: FlowR.Core.INode.On(System.String,System.EventHandler)
    name: On
    nameWithType: INode.On
    fullName: FlowR.Core.INode.On
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.EventHandler
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FlowR.Core.INode.On(System.String,System.EventHandler)
    name: On
    nameWithType: INode.On
    fullName: FlowR.Core.INode.On
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.EventHandler
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler
  commentId: T:System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: FlowR.Core.Node.Off*
  commentId: Overload:FlowR.Core.Node.Off
  name: Off
  nameWithType: Node.Off
  fullName: FlowR.Core.Node.Off
- uid: FlowR.Core.INode.Off(System.String,System.EventHandler)
  commentId: M:FlowR.Core.INode.Off(System.String,System.EventHandler)
  parent: FlowR.Core.INode
  isExternal: true
  name: Off(String, EventHandler)
  nameWithType: INode.Off(String, EventHandler)
  fullName: FlowR.Core.INode.Off(System.String, System.EventHandler)
  spec.csharp:
  - uid: FlowR.Core.INode.Off(System.String,System.EventHandler)
    name: Off
    nameWithType: INode.Off
    fullName: FlowR.Core.INode.Off
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.EventHandler
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FlowR.Core.INode.Off(System.String,System.EventHandler)
    name: Off
    nameWithType: INode.Off
    fullName: FlowR.Core.INode.Off
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.EventHandler
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: FlowR.Core.INode.Off(System.String)
  commentId: M:FlowR.Core.INode.Off(System.String)
  parent: FlowR.Core.INode
  isExternal: true
  name: Off(String)
  nameWithType: INode.Off(String)
  fullName: FlowR.Core.INode.Off(System.String)
  spec.csharp:
  - uid: FlowR.Core.INode.Off(System.String)
    name: Off
    nameWithType: INode.Off
    fullName: FlowR.Core.INode.Off
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FlowR.Core.INode.Off(System.String)
    name: Off
    nameWithType: INode.Off
    fullName: FlowR.Core.INode.Off
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: FlowR.Core.Node.OnClientEventTriggered*
  commentId: Overload:FlowR.Core.Node.OnClientEventTriggered
  name: OnClientEventTriggered
  nameWithType: Node.OnClientEventTriggered
  fullName: FlowR.Core.Node.OnClientEventTriggered
- uid: FlowR.Core.INode.OnClientEventTriggered(System.String,System.EventArgs)
  commentId: M:FlowR.Core.INode.OnClientEventTriggered(System.String,System.EventArgs)
  parent: FlowR.Core.INode
  isExternal: true
  name: OnClientEventTriggered(String, EventArgs)
  nameWithType: INode.OnClientEventTriggered(String, EventArgs)
  fullName: FlowR.Core.INode.OnClientEventTriggered(System.String, System.EventArgs)
  spec.csharp:
  - uid: FlowR.Core.INode.OnClientEventTriggered(System.String,System.EventArgs)
    name: OnClientEventTriggered
    nameWithType: INode.OnClientEventTriggered
    fullName: FlowR.Core.INode.OnClientEventTriggered
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.EventArgs
    name: EventArgs
    nameWithType: EventArgs
    fullName: System.EventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FlowR.Core.INode.OnClientEventTriggered(System.String,System.EventArgs)
    name: OnClientEventTriggered
    nameWithType: INode.OnClientEventTriggered
    fullName: FlowR.Core.INode.OnClientEventTriggered
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.EventArgs
    name: EventArgs
    nameWithType: EventArgs
    fullName: System.EventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventArgs
  commentId: T:System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: FlowR.Core.Node.AddJavascriptMethod*
  commentId: Overload:FlowR.Core.Node.AddJavascriptMethod
  name: AddJavascriptMethod
  nameWithType: Node.AddJavascriptMethod
  fullName: FlowR.Core.Node.AddJavascriptMethod
- uid: FlowR.Core.INode.AddJavascriptMethod(System.String,System.String)
  commentId: M:FlowR.Core.INode.AddJavascriptMethod(System.String,System.String)
  parent: FlowR.Core.INode
  isExternal: true
  name: AddJavascriptMethod(String, String)
  nameWithType: INode.AddJavascriptMethod(String, String)
  fullName: FlowR.Core.INode.AddJavascriptMethod(System.String, System.String)
  spec.csharp:
  - uid: FlowR.Core.INode.AddJavascriptMethod(System.String,System.String)
    name: AddJavascriptMethod
    nameWithType: INode.AddJavascriptMethod
    fullName: FlowR.Core.INode.AddJavascriptMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FlowR.Core.INode.AddJavascriptMethod(System.String,System.String)
    name: AddJavascriptMethod
    nameWithType: INode.AddJavascriptMethod
    fullName: FlowR.Core.INode.AddJavascriptMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: FlowR.Core.Node.CallClientMethod*
  commentId: Overload:FlowR.Core.Node.CallClientMethod
  name: CallClientMethod
  nameWithType: Node.CallClientMethod
  fullName: FlowR.Core.Node.CallClientMethod
- uid: FlowR.Core.INode.CallClientMethod(System.String,System.String[])
  commentId: M:FlowR.Core.INode.CallClientMethod(System.String,System.String[])
  parent: FlowR.Core.INode
  isExternal: true
  name: CallClientMethod(String, String[])
  nameWithType: INode.CallClientMethod(String, String[])
  fullName: FlowR.Core.INode.CallClientMethod(System.String, System.String[])
  nameWithType.vb: INode.CallClientMethod(String, String())
  fullName.vb: FlowR.Core.INode.CallClientMethod(System.String, System.String())
  name.vb: CallClientMethod(String, String())
  spec.csharp:
  - uid: FlowR.Core.INode.CallClientMethod(System.String,System.String[])
    name: CallClientMethod
    nameWithType: INode.CallClientMethod
    fullName: FlowR.Core.INode.CallClientMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FlowR.Core.INode.CallClientMethod(System.String,System.String[])
    name: CallClientMethod
    nameWithType: INode.CallClientMethod
    fullName: FlowR.Core.INode.CallClientMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: FlowR.Core.Node.CallClientMethodAsync*
  commentId: Overload:FlowR.Core.Node.CallClientMethodAsync
  name: CallClientMethodAsync
  nameWithType: Node.CallClientMethodAsync
  fullName: FlowR.Core.Node.CallClientMethodAsync
- uid: FlowR.Core.INode.CallClientMethodAsync(System.String,System.String[])
  commentId: M:FlowR.Core.INode.CallClientMethodAsync(System.String,System.String[])
  parent: FlowR.Core.INode
  isExternal: true
  name: CallClientMethodAsync(String, String[])
  nameWithType: INode.CallClientMethodAsync(String, String[])
  fullName: FlowR.Core.INode.CallClientMethodAsync(System.String, System.String[])
  nameWithType.vb: INode.CallClientMethodAsync(String, String())
  fullName.vb: FlowR.Core.INode.CallClientMethodAsync(System.String, System.String())
  name.vb: CallClientMethodAsync(String, String())
  spec.csharp:
  - uid: FlowR.Core.INode.CallClientMethodAsync(System.String,System.String[])
    name: CallClientMethodAsync
    nameWithType: INode.CallClientMethodAsync
    fullName: FlowR.Core.INode.CallClientMethodAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FlowR.Core.INode.CallClientMethodAsync(System.String,System.String[])
    name: CallClientMethodAsync
    nameWithType: INode.CallClientMethodAsync
    fullName: FlowR.Core.INode.CallClientMethodAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: FlowR.Core.Node.GetFirstOwnerOfType*
  commentId: Overload:FlowR.Core.Node.GetFirstOwnerOfType
  name: GetFirstOwnerOfType
  nameWithType: Node.GetFirstOwnerOfType
  fullName: FlowR.Core.Node.GetFirstOwnerOfType
- uid: FlowR.Core.INode.GetFirstOwnerOfType``1
  commentId: M:FlowR.Core.INode.GetFirstOwnerOfType``1
  parent: FlowR.Core.INode
  name: GetFirstOwnerOfType<T>()
  nameWithType: INode.GetFirstOwnerOfType<T>()
  fullName: FlowR.Core.INode.GetFirstOwnerOfType<T>()
  nameWithType.vb: INode.GetFirstOwnerOfType(Of T)()
  fullName.vb: FlowR.Core.INode.GetFirstOwnerOfType(Of T)()
  name.vb: GetFirstOwnerOfType(Of T)()
  spec.csharp:
  - uid: FlowR.Core.INode.GetFirstOwnerOfType``1
    name: GetFirstOwnerOfType<T>
    nameWithType: INode.GetFirstOwnerOfType<T>
    fullName: FlowR.Core.INode.GetFirstOwnerOfType<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FlowR.Core.INode.GetFirstOwnerOfType``1
    name: GetFirstOwnerOfType(Of T)
    nameWithType: INode.GetFirstOwnerOfType(Of T)
    fullName: FlowR.Core.INode.GetFirstOwnerOfType(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: FlowR.Core.Node.GetChildrenOfType*
  commentId: Overload:FlowR.Core.Node.GetChildrenOfType
  name: GetChildrenOfType
  nameWithType: Node.GetChildrenOfType
  fullName: FlowR.Core.Node.GetChildrenOfType
- uid: FlowR.Core.INode.GetChildrenOfType``1
  commentId: M:FlowR.Core.INode.GetChildrenOfType``1
  parent: FlowR.Core.INode
  name: GetChildrenOfType<T>()
  nameWithType: INode.GetChildrenOfType<T>()
  fullName: FlowR.Core.INode.GetChildrenOfType<T>()
  nameWithType.vb: INode.GetChildrenOfType(Of T)()
  fullName.vb: FlowR.Core.INode.GetChildrenOfType(Of T)()
  name.vb: GetChildrenOfType(Of T)()
  spec.csharp:
  - uid: FlowR.Core.INode.GetChildrenOfType``1
    name: GetChildrenOfType<T>
    nameWithType: INode.GetChildrenOfType<T>
    fullName: FlowR.Core.INode.GetChildrenOfType<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FlowR.Core.INode.GetChildrenOfType``1
    name: GetChildrenOfType(Of T)
    nameWithType: INode.GetChildrenOfType(Of T)
    fullName: FlowR.Core.INode.GetChildrenOfType(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{{T}}
  commentId: T:System.Collections.Generic.List{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: FlowR.Core.Node.AddCssClass*
  commentId: Overload:FlowR.Core.Node.AddCssClass
  name: AddCssClass
  nameWithType: Node.AddCssClass
  fullName: FlowR.Core.Node.AddCssClass
- uid: FlowR.Core.INode.AddCssClass(System.String)
  commentId: M:FlowR.Core.INode.AddCssClass(System.String)
  parent: FlowR.Core.INode
  isExternal: true
  name: AddCssClass(String)
  nameWithType: INode.AddCssClass(String)
  fullName: FlowR.Core.INode.AddCssClass(System.String)
  spec.csharp:
  - uid: FlowR.Core.INode.AddCssClass(System.String)
    name: AddCssClass
    nameWithType: INode.AddCssClass
    fullName: FlowR.Core.INode.AddCssClass
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FlowR.Core.INode.AddCssClass(System.String)
    name: AddCssClass
    nameWithType: INode.AddCssClass
    fullName: FlowR.Core.INode.AddCssClass
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: FlowR.Core.Node.RemoveCssClass*
  commentId: Overload:FlowR.Core.Node.RemoveCssClass
  name: RemoveCssClass
  nameWithType: Node.RemoveCssClass
  fullName: FlowR.Core.Node.RemoveCssClass
- uid: FlowR.Core.INode.RemoveCssClass(System.String)
  commentId: M:FlowR.Core.INode.RemoveCssClass(System.String)
  parent: FlowR.Core.INode
  isExternal: true
  name: RemoveCssClass(String)
  nameWithType: INode.RemoveCssClass(String)
  fullName: FlowR.Core.INode.RemoveCssClass(System.String)
  spec.csharp:
  - uid: FlowR.Core.INode.RemoveCssClass(System.String)
    name: RemoveCssClass
    nameWithType: INode.RemoveCssClass
    fullName: FlowR.Core.INode.RemoveCssClass
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FlowR.Core.INode.RemoveCssClass(System.String)
    name: RemoveCssClass
    nameWithType: INode.RemoveCssClass
    fullName: FlowR.Core.INode.RemoveCssClass
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: FlowR.Core.Node.SetUuid*
  commentId: Overload:FlowR.Core.Node.SetUuid
  name: SetUuid
  nameWithType: Node.SetUuid
  fullName: FlowR.Core.Node.SetUuid
- uid: FlowR.Core.Node.SetApplication*
  commentId: Overload:FlowR.Core.Node.SetApplication
  name: SetApplication
  nameWithType: Node.SetApplication
  fullName: FlowR.Core.Node.SetApplication
- uid: FlowR.Core.Node.ValidateNode*
  commentId: Overload:FlowR.Core.Node.ValidateNode
  name: ValidateNode
  nameWithType: Node.ValidateNode
  fullName: FlowR.Core.Node.ValidateNode
- uid: FlowR.Core.Node.GetLogger*
  commentId: Overload:FlowR.Core.Node.GetLogger
  name: GetLogger
  nameWithType: Node.GetLogger
  fullName: FlowR.Core.Node.GetLogger
- uid: Microsoft.Extensions.Logging.ILogger{FlowR.Core.Application}
  commentId: T:Microsoft.Extensions.Logging.ILogger{FlowR.Core.Application}
  parent: Microsoft.Extensions.Logging
  definition: Microsoft.Extensions.Logging.ILogger`1
  name: ILogger<Application>
  nameWithType: ILogger<Application>
  fullName: Microsoft.Extensions.Logging.ILogger<FlowR.Core.Application>
  nameWithType.vb: ILogger(Of Application)
  fullName.vb: Microsoft.Extensions.Logging.ILogger(Of FlowR.Core.Application)
  name.vb: ILogger(Of Application)
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: FlowR.Core.Application
    name: Application
    nameWithType: Application
    fullName: FlowR.Core.Application
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: FlowR.Core.Application
    name: Application
    nameWithType: Application
    fullName: FlowR.Core.Application
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging.ILogger`1
  commentId: T:Microsoft.Extensions.Logging.ILogger`1
  isExternal: true
  name: ILogger<TCategoryName>
  nameWithType: ILogger<TCategoryName>
  fullName: Microsoft.Extensions.Logging.ILogger<TCategoryName>
  nameWithType.vb: ILogger(Of TCategoryName)
  fullName.vb: Microsoft.Extensions.Logging.ILogger(Of TCategoryName)
  name.vb: ILogger(Of TCategoryName)
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCategoryName
    nameWithType: TCategoryName
    fullName: TCategoryName
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCategoryName
    nameWithType: TCategoryName
    fullName: TCategoryName
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: true
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
