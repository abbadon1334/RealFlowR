### YamlMime:ManagedReference
items:
- uid: FlowR.Core.INode
  commentId: T:FlowR.Core.INode
  id: INode
  parent: FlowR.Core
  children:
  - FlowR.Core.INode.Add``1(System.Collections.Generic.Dictionary{System.String,System.String})
  - FlowR.Core.INode.Add``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String})
  - FlowR.Core.INode.AddCssClass(System.String)
  - FlowR.Core.INode.AddJavascriptMethod(System.String,System.String)
  - FlowR.Core.INode.CallClientMethod(System.String,System.String[])
  - FlowR.Core.INode.CallClientMethodAsync(System.String,System.String[])
  - FlowR.Core.INode.GetApplication
  - FlowR.Core.INode.GetAttribute(System.String)
  - FlowR.Core.INode.GetAttributes
  - FlowR.Core.INode.GetChildren
  - FlowR.Core.INode.GetChildrenOfType``1
  - FlowR.Core.INode.GetCommunication
  - FlowR.Core.INode.GetEventHandlers
  - FlowR.Core.INode.GetFirstOwnerOfType``1
  - FlowR.Core.INode.GetOwner
  - FlowR.Core.INode.GetProperties
  - FlowR.Core.INode.GetProperty(System.String)
  - FlowR.Core.INode.GetPropertyAsync(System.String)
  - FlowR.Core.INode.GetTagName
  - FlowR.Core.INode.GetText
  - FlowR.Core.INode.GetUuid
  - FlowR.Core.INode.HasAttribute(System.String)
  - FlowR.Core.INode.Init
  - FlowR.Core.INode.Off(System.String)
  - FlowR.Core.INode.Off(System.String,System.EventHandler)
  - FlowR.Core.INode.On(System.String,System.EventHandler)
  - FlowR.Core.INode.OnClientEventTriggered(System.String,System.EventArgs)
  - FlowR.Core.INode.Remove(FlowR.Core.INode)
  - FlowR.Core.INode.RemoveAttribute(System.String)
  - FlowR.Core.INode.RemoveCssClass(System.String)
  - FlowR.Core.INode.SetAttribute(System.Collections.Generic.Dictionary{System.String,System.String})
  - FlowR.Core.INode.SetAttribute(System.String,System.String)
  - FlowR.Core.INode.SetOwner(FlowR.Core.INode)
  - FlowR.Core.INode.SetProperty(System.String,System.String)
  - FlowR.Core.INode.SetText(System.String)
  langs:
  - csharp
  - vb
  name: INode
  nameWithType: INode
  fullName: FlowR.Core.INode
  type: Interface
  source:
    remote:
      path: FlowR.Core/INode.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: INode
    path: ../FlowR.Core/INode.cs
    startLine: 9
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nThe Node\n"
  example: []
  syntax:
    content: public interface INode
    content.vb: Public Interface INode
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: FlowR.Core.INode.GetTagName
  commentId: M:FlowR.Core.INode.GetTagName
  id: GetTagName
  parent: FlowR.Core.INode
  langs:
  - csharp
  - vb
  name: GetTagName()
  nameWithType: INode.GetTagName()
  fullName: FlowR.Core.INode.GetTagName()
  type: Method
  source:
    remote:
      path: FlowR.Core/INode.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: GetTagName
    path: ../FlowR.Core/INode.cs
    startLine: 15
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nGet HTML Tag name.\n"
  example: []
  syntax:
    content: string GetTagName()
    return:
      type: System.String
      description: ''
    content.vb: Function GetTagName As String
  overload: FlowR.Core.INode.GetTagName*
- uid: FlowR.Core.INode.GetOwner
  commentId: M:FlowR.Core.INode.GetOwner
  id: GetOwner
  parent: FlowR.Core.INode
  langs:
  - csharp
  - vb
  name: GetOwner()
  nameWithType: INode.GetOwner()
  fullName: FlowR.Core.INode.GetOwner()
  type: Method
  source:
    remote:
      path: FlowR.Core/INode.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: GetOwner
    path: ../FlowR.Core/INode.cs
    startLine: 21
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nGet INode Owner, the parent INode.\n"
  example: []
  syntax:
    content: INode GetOwner()
    return:
      type: FlowR.Core.INode
      description: ''
    content.vb: Function GetOwner As INode
  overload: FlowR.Core.INode.GetOwner*
- uid: FlowR.Core.INode.SetOwner(FlowR.Core.INode)
  commentId: M:FlowR.Core.INode.SetOwner(FlowR.Core.INode)
  id: SetOwner(FlowR.Core.INode)
  parent: FlowR.Core.INode
  langs:
  - csharp
  - vb
  name: SetOwner(INode)
  nameWithType: INode.SetOwner(INode)
  fullName: FlowR.Core.INode.SetOwner(FlowR.Core.INode)
  type: Method
  source:
    remote:
      path: FlowR.Core/INode.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: SetOwner
    path: ../FlowR.Core/INode.cs
    startLine: 27
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nSet Inode Owner, the parent INode.\n"
  example: []
  syntax:
    content: void SetOwner(INode owner)
    parameters:
    - id: owner
      type: FlowR.Core.INode
      description: ''
    content.vb: Sub SetOwner(owner As INode)
  overload: FlowR.Core.INode.SetOwner*
- uid: FlowR.Core.INode.GetApplication
  commentId: M:FlowR.Core.INode.GetApplication
  id: GetApplication
  parent: FlowR.Core.INode
  langs:
  - csharp
  - vb
  name: GetApplication()
  nameWithType: INode.GetApplication()
  fullName: FlowR.Core.INode.GetApplication()
  type: Method
  source:
    remote:
      path: FlowR.Core/INode.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: GetApplication
    path: ../FlowR.Core/INode.cs
    startLine: 33
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nGet the linked Application Client.\n"
  example: []
  syntax:
    content: Application GetApplication()
    return:
      type: FlowR.Core.Application
      description: ''
    content.vb: Function GetApplication As Application
  overload: FlowR.Core.INode.GetApplication*
- uid: FlowR.Core.INode.GetUuid
  commentId: M:FlowR.Core.INode.GetUuid
  id: GetUuid
  parent: FlowR.Core.INode
  langs:
  - csharp
  - vb
  name: GetUuid()
  nameWithType: INode.GetUuid()
  fullName: FlowR.Core.INode.GetUuid()
  type: Method
  source:
    remote:
      path: FlowR.Core/INode.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: GetUuid
    path: ../FlowR.Core/INode.cs
    startLine: 39
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nGet Uuid. if not defined will be generated on first request.\n"
  example: []
  syntax:
    content: string GetUuid()
    return:
      type: System.String
      description: ''
    content.vb: Function GetUuid As String
  overload: FlowR.Core.INode.GetUuid*
- uid: FlowR.Core.INode.GetAttributes
  commentId: M:FlowR.Core.INode.GetAttributes
  id: GetAttributes
  parent: FlowR.Core.INode
  langs:
  - csharp
  - vb
  name: GetAttributes()
  nameWithType: INode.GetAttributes()
  fullName: FlowR.Core.INode.GetAttributes()
  type: Method
  source:
    remote:
      path: FlowR.Core/INode.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: GetAttributes
    path: ../FlowR.Core/INode.cs
    startLine: 45
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nGet the Dictionary attributes of the Inode\n"
  example: []
  syntax:
    content: ObservableDictionary<string, string> GetAttributes()
    return:
      type: FlowR.Core.ObservableDictionary{System.String,System.String}
      description: ''
    content.vb: Function GetAttributes As ObservableDictionary(Of String, String)
  overload: FlowR.Core.INode.GetAttributes*
- uid: FlowR.Core.INode.GetProperties
  commentId: M:FlowR.Core.INode.GetProperties
  id: GetProperties
  parent: FlowR.Core.INode
  langs:
  - csharp
  - vb
  name: GetProperties()
  nameWithType: INode.GetProperties()
  fullName: FlowR.Core.INode.GetProperties()
  type: Method
  source:
    remote:
      path: FlowR.Core/INode.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: GetProperties
    path: ../FlowR.Core/INode.cs
    startLine: 51
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nGet the Dictionary properties of the Inode\n"
  example: []
  syntax:
    content: ObservableDictionary<string, string> GetProperties()
    return:
      type: FlowR.Core.ObservableDictionary{System.String,System.String}
      description: ''
    content.vb: Function GetProperties As ObservableDictionary(Of String, String)
  overload: FlowR.Core.INode.GetProperties*
- uid: FlowR.Core.INode.GetEventHandlers
  commentId: M:FlowR.Core.INode.GetEventHandlers
  id: GetEventHandlers
  parent: FlowR.Core.INode
  langs:
  - csharp
  - vb
  name: GetEventHandlers()
  nameWithType: INode.GetEventHandlers()
  fullName: FlowR.Core.INode.GetEventHandlers()
  type: Method
  source:
    remote:
      path: FlowR.Core/INode.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: GetEventHandlers
    path: ../FlowR.Core/INode.cs
    startLine: 57
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nGet the Dictionary properties of the Inode\n"
  example: []
  syntax:
    content: ObservableDictionary<string, List<EventHandler>> GetEventHandlers()
    return:
      type: FlowR.Core.ObservableDictionary{System.String,System.Collections.Generic.List{System.EventHandler}}
      description: ''
    content.vb: Function GetEventHandlers As ObservableDictionary(Of String, List(Of EventHandler))
  overload: FlowR.Core.INode.GetEventHandlers*
- uid: FlowR.Core.INode.GetCommunication
  commentId: M:FlowR.Core.INode.GetCommunication
  id: GetCommunication
  parent: FlowR.Core.INode
  langs:
  - csharp
  - vb
  name: GetCommunication()
  nameWithType: INode.GetCommunication()
  fullName: FlowR.Core.INode.GetCommunication()
  type: Method
  source:
    remote:
      path: FlowR.Core/INode.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: GetCommunication
    path: ../FlowR.Core/INode.cs
    startLine: 63
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nGet the ApplicationCommunication of the Inode\n"
  example: []
  syntax:
    content: ApplicationCommunication GetCommunication()
    return:
      type: FlowR.Core.ApplicationCommunication
      description: ''
    content.vb: Function GetCommunication As ApplicationCommunication
  overload: FlowR.Core.INode.GetCommunication*
- uid: FlowR.Core.INode.GetChildren
  commentId: M:FlowR.Core.INode.GetChildren
  id: GetChildren
  parent: FlowR.Core.INode
  langs:
  - csharp
  - vb
  name: GetChildren()
  nameWithType: INode.GetChildren()
  fullName: FlowR.Core.INode.GetChildren()
  type: Method
  source:
    remote:
      path: FlowR.Core/INode.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: GetChildren
    path: ../FlowR.Core/INode.cs
    startLine: 69
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nGet Children Inodes\n"
  example: []
  syntax:
    content: ObservableDictionary<string, INode> GetChildren()
    return:
      type: FlowR.Core.ObservableDictionary{System.String,FlowR.Core.INode}
      description: ''
    content.vb: Function GetChildren As ObservableDictionary(Of String, INode)
  overload: FlowR.Core.INode.GetChildren*
- uid: FlowR.Core.INode.GetText
  commentId: M:FlowR.Core.INode.GetText
  id: GetText
  parent: FlowR.Core.INode
  langs:
  - csharp
  - vb
  name: GetText()
  nameWithType: INode.GetText()
  fullName: FlowR.Core.INode.GetText()
  type: Method
  source:
    remote:
      path: FlowR.Core/INode.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: GetText
    path: ../FlowR.Core/INode.cs
    startLine: 75
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nGet Node Text.\n"
  example: []
  syntax:
    content: string GetText()
    return:
      type: System.String
      description: ''
    content.vb: Function GetText As String
  overload: FlowR.Core.INode.GetText*
- uid: FlowR.Core.INode.SetText(System.String)
  commentId: M:FlowR.Core.INode.SetText(System.String)
  id: SetText(System.String)
  parent: FlowR.Core.INode
  langs:
  - csharp
  - vb
  name: SetText(String)
  nameWithType: INode.SetText(String)
  fullName: FlowR.Core.INode.SetText(System.String)
  type: Method
  source:
    remote:
      path: FlowR.Core/INode.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: SetText
    path: ../FlowR.Core/INode.cs
    startLine: 81
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nSet Node Text.\n"
  example: []
  syntax:
    content: INode SetText(string text)
    parameters:
    - id: text
      type: System.String
      description: ''
    return:
      type: FlowR.Core.INode
    content.vb: Function SetText(text As String) As INode
  overload: FlowR.Core.INode.SetText*
- uid: FlowR.Core.INode.Init
  commentId: M:FlowR.Core.INode.Init
  id: Init
  parent: FlowR.Core.INode
  langs:
  - csharp
  - vb
  name: Init()
  nameWithType: INode.Init()
  fullName: FlowR.Core.INode.Init()
  type: Method
  source:
    remote:
      path: FlowR.Core/INode.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: Init
    path: ../FlowR.Core/INode.cs
    startLine: 89
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nStarting point of every component.\nWill be called after attach to Owner.\nThis is the method you are looking for if you want to make a new component\n"
  example: []
  syntax:
    content: void Init()
    content.vb: Sub Init
  overload: FlowR.Core.INode.Init*
- uid: FlowR.Core.INode.SetAttribute(System.String,System.String)
  commentId: M:FlowR.Core.INode.SetAttribute(System.String,System.String)
  id: SetAttribute(System.String,System.String)
  parent: FlowR.Core.INode
  langs:
  - csharp
  - vb
  name: SetAttribute(String, String)
  nameWithType: INode.SetAttribute(String, String)
  fullName: FlowR.Core.INode.SetAttribute(System.String, System.String)
  type: Method
  source:
    remote:
      path: FlowR.Core/INode.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: SetAttribute
    path: ../FlowR.Core/INode.cs
    startLine: 96
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nSet Attribute of INode\n"
  example: []
  syntax:
    content: INode SetAttribute(string name, string value)
    parameters:
    - id: name
      type: System.String
      description: ''
    - id: value
      type: System.String
      description: ''
    return:
      type: FlowR.Core.INode
    content.vb: Function SetAttribute(name As String, value As String) As INode
  overload: FlowR.Core.INode.SetAttribute*
- uid: FlowR.Core.INode.SetAttribute(System.Collections.Generic.Dictionary{System.String,System.String})
  commentId: M:FlowR.Core.INode.SetAttribute(System.Collections.Generic.Dictionary{System.String,System.String})
  id: SetAttribute(System.Collections.Generic.Dictionary{System.String,System.String})
  parent: FlowR.Core.INode
  langs:
  - csharp
  - vb
  name: SetAttribute(Dictionary<String, String>)
  nameWithType: INode.SetAttribute(Dictionary<String, String>)
  fullName: FlowR.Core.INode.SetAttribute(System.Collections.Generic.Dictionary<System.String, System.String>)
  type: Method
  source:
    remote:
      path: FlowR.Core/INode.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: SetAttribute
    path: ../FlowR.Core/INode.cs
    startLine: 102
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nSet multiple attributes.\n"
  example: []
  syntax:
    content: INode SetAttribute(Dictionary<string, string> attributes = null)
    parameters:
    - id: attributes
      type: System.Collections.Generic.Dictionary{System.String,System.String}
      description: ''
    return:
      type: FlowR.Core.INode
    content.vb: Function SetAttribute(attributes As Dictionary(Of String, String) = Nothing) As INode
  overload: FlowR.Core.INode.SetAttribute*
  nameWithType.vb: INode.SetAttribute(Dictionary(Of String, String))
  fullName.vb: FlowR.Core.INode.SetAttribute(System.Collections.Generic.Dictionary(Of System.String, System.String))
  name.vb: SetAttribute(Dictionary(Of String, String))
- uid: FlowR.Core.INode.GetAttribute(System.String)
  commentId: M:FlowR.Core.INode.GetAttribute(System.String)
  id: GetAttribute(System.String)
  parent: FlowR.Core.INode
  langs:
  - csharp
  - vb
  name: GetAttribute(String)
  nameWithType: INode.GetAttribute(String)
  fullName: FlowR.Core.INode.GetAttribute(System.String)
  type: Method
  source:
    remote:
      path: FlowR.Core/INode.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: GetAttribute
    path: ../FlowR.Core/INode.cs
    startLine: 109
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nGet Attribute of Inode by name.\n"
  example: []
  syntax:
    content: string GetAttribute(string name)
    parameters:
    - id: name
      type: System.String
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: Function GetAttribute(name As String) As String
  overload: FlowR.Core.INode.GetAttribute*
- uid: FlowR.Core.INode.RemoveAttribute(System.String)
  commentId: M:FlowR.Core.INode.RemoveAttribute(System.String)
  id: RemoveAttribute(System.String)
  parent: FlowR.Core.INode
  langs:
  - csharp
  - vb
  name: RemoveAttribute(String)
  nameWithType: INode.RemoveAttribute(String)
  fullName: FlowR.Core.INode.RemoveAttribute(System.String)
  type: Method
  source:
    remote:
      path: FlowR.Core/INode.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: RemoveAttribute
    path: ../FlowR.Core/INode.cs
    startLine: 116
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nRemove Attribute of Inode by name.\n"
  example: []
  syntax:
    content: INode RemoveAttribute(string name)
    parameters:
    - id: name
      type: System.String
      description: ''
    return:
      type: FlowR.Core.INode
      description: ''
    content.vb: Function RemoveAttribute(name As String) As INode
  overload: FlowR.Core.INode.RemoveAttribute*
- uid: FlowR.Core.INode.HasAttribute(System.String)
  commentId: M:FlowR.Core.INode.HasAttribute(System.String)
  id: HasAttribute(System.String)
  parent: FlowR.Core.INode
  langs:
  - csharp
  - vb
  name: HasAttribute(String)
  nameWithType: INode.HasAttribute(String)
  fullName: FlowR.Core.INode.HasAttribute(System.String)
  type: Method
  source:
    remote:
      path: FlowR.Core/INode.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: HasAttribute
    path: ../FlowR.Core/INode.cs
    startLine: 123
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nReturn if Has Attribute with name.\n"
  example: []
  syntax:
    content: bool HasAttribute(string name)
    parameters:
    - id: name
      type: System.String
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Function HasAttribute(name As String) As Boolean
  overload: FlowR.Core.INode.HasAttribute*
- uid: FlowR.Core.INode.SetProperty(System.String,System.String)
  commentId: M:FlowR.Core.INode.SetProperty(System.String,System.String)
  id: SetProperty(System.String,System.String)
  parent: FlowR.Core.INode
  langs:
  - csharp
  - vb
  name: SetProperty(String, String)
  nameWithType: INode.SetProperty(String, String)
  fullName: FlowR.Core.INode.SetProperty(System.String, System.String)
  type: Method
  source:
    remote:
      path: FlowR.Core/INode.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: SetProperty
    path: ../FlowR.Core/INode.cs
    startLine: 130
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nSet Node property on client side.\n"
  example: []
  syntax:
    content: INode SetProperty(string name, string value)
    parameters:
    - id: name
      type: System.String
      description: ''
    - id: value
      type: System.String
      description: ''
    return:
      type: FlowR.Core.INode
    content.vb: Function SetProperty(name As String, value As String) As INode
  overload: FlowR.Core.INode.SetProperty*
- uid: FlowR.Core.INode.GetProperty(System.String)
  commentId: M:FlowR.Core.INode.GetProperty(System.String)
  id: GetProperty(System.String)
  parent: FlowR.Core.INode
  langs:
  - csharp
  - vb
  name: GetProperty(String)
  nameWithType: INode.GetProperty(String)
  fullName: FlowR.Core.INode.GetProperty(System.String)
  type: Method
  source:
    remote:
      path: FlowR.Core/INode.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: GetProperty
    path: ../FlowR.Core/INode.cs
    startLine: 137
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nGet Node property from memory.\n"
  example: []
  syntax:
    content: string GetProperty(string path)
    parameters:
    - id: path
      type: System.String
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: Function GetProperty(path As String) As String
  overload: FlowR.Core.INode.GetProperty*
- uid: FlowR.Core.INode.GetPropertyAsync(System.String)
  commentId: M:FlowR.Core.INode.GetPropertyAsync(System.String)
  id: GetPropertyAsync(System.String)
  parent: FlowR.Core.INode
  langs:
  - csharp
  - vb
  name: GetPropertyAsync(String)
  nameWithType: INode.GetPropertyAsync(String)
  fullName: FlowR.Core.INode.GetPropertyAsync(System.String)
  type: Method
  source:
    remote:
      path: FlowR.Core/INode.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: GetPropertyAsync
    path: ../FlowR.Core/INode.cs
    startLine: 145
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nAsync request INode property from client.\nWait for response, update in memory and return result.\n"
  example: []
  syntax:
    content: Task<string> GetPropertyAsync(string path)
    parameters:
    - id: path
      type: System.String
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: ''
    content.vb: Function GetPropertyAsync(path As String) As Task(Of String)
  overload: FlowR.Core.INode.GetPropertyAsync*
- uid: FlowR.Core.INode.Add``1(System.Collections.Generic.Dictionary{System.String,System.String})
  commentId: M:FlowR.Core.INode.Add``1(System.Collections.Generic.Dictionary{System.String,System.String})
  id: Add``1(System.Collections.Generic.Dictionary{System.String,System.String})
  parent: FlowR.Core.INode
  langs:
  - csharp
  - vb
  name: Add<TNodeComponent>(Dictionary<String, String>)
  nameWithType: INode.Add<TNodeComponent>(Dictionary<String, String>)
  fullName: FlowR.Core.INode.Add<TNodeComponent>(System.Collections.Generic.Dictionary<System.String, System.String>)
  type: Method
  source:
    remote:
      path: FlowR.Core/INode.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: Add
    path: ../FlowR.Core/INode.cs
    startLine: 153
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nFluid Add Element\n"
  example: []
  syntax:
    content: >-
      TNodeComponent Add<TNodeComponent>(Dictionary<string, string> attributes = null)
          where TNodeComponent : INodeComponent, new()
    parameters:
    - id: attributes
      type: System.Collections.Generic.Dictionary{System.String,System.String}
      description: ''
    typeParameters:
    - id: TNodeComponent
      description: ''
    return:
      type: '{TNodeComponent}'
      description: ''
    content.vb: Function Add(Of TNodeComponent As {INodeComponent, New})(attributes As Dictionary(Of String, String) = Nothing) As TNodeComponent
  overload: FlowR.Core.INode.Add*
  nameWithType.vb: INode.Add(Of TNodeComponent)(Dictionary(Of String, String))
  fullName.vb: FlowR.Core.INode.Add(Of TNodeComponent)(System.Collections.Generic.Dictionary(Of System.String, System.String))
  name.vb: Add(Of TNodeComponent)(Dictionary(Of String, String))
- uid: FlowR.Core.INode.Add``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String})
  commentId: M:FlowR.Core.INode.Add``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String})
  id: Add``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String})
  parent: FlowR.Core.INode
  langs:
  - csharp
  - vb
  name: Add<TNodeControl>(String, Dictionary<String, String>)
  nameWithType: INode.Add<TNodeControl>(String, Dictionary<String, String>)
  fullName: FlowR.Core.INode.Add<TNodeControl>(System.String, System.Collections.Generic.Dictionary<System.String, System.String>)
  type: Method
  source:
    remote:
      path: FlowR.Core/INode.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: Add
    path: ../FlowR.Core/INode.cs
    startLine: 162
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nFluid Add Element\n"
  example: []
  syntax:
    content: >-
      TNodeControl Add<TNodeControl>(string controlName, Dictionary<string, string> attributes = null)
          where TNodeControl : INodeControl, new()
    parameters:
    - id: controlName
      type: System.String
      description: ''
    - id: attributes
      type: System.Collections.Generic.Dictionary{System.String,System.String}
      description: ''
    typeParameters:
    - id: TNodeControl
      description: ''
    return:
      type: '{TNodeControl}'
      description: ''
    content.vb: Function Add(Of TNodeControl As {INodeControl, New})(controlName As String, attributes As Dictionary(Of String, String) = Nothing) As TNodeControl
  overload: FlowR.Core.INode.Add*
  nameWithType.vb: INode.Add(Of TNodeControl)(String, Dictionary(Of String, String))
  fullName.vb: FlowR.Core.INode.Add(Of TNodeControl)(System.String, System.Collections.Generic.Dictionary(Of System.String, System.String))
  name.vb: Add(Of TNodeControl)(String, Dictionary(Of String, String))
- uid: FlowR.Core.INode.Remove(FlowR.Core.INode)
  commentId: M:FlowR.Core.INode.Remove(FlowR.Core.INode)
  id: Remove(FlowR.Core.INode)
  parent: FlowR.Core.INode
  langs:
  - csharp
  - vb
  name: Remove(INode)
  nameWithType: INode.Remove(INode)
  fullName: FlowR.Core.INode.Remove(FlowR.Core.INode)
  type: Method
  source:
    remote:
      path: FlowR.Core/INode.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: Remove
    path: ../FlowR.Core/INode.cs
    startLine: 168
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nRemove child.\n"
  example: []
  syntax:
    content: void Remove(INode child)
    parameters:
    - id: child
      type: FlowR.Core.INode
      description: ''
    content.vb: Sub Remove(child As INode)
  overload: FlowR.Core.INode.Remove*
- uid: FlowR.Core.INode.On(System.String,System.EventHandler)
  commentId: M:FlowR.Core.INode.On(System.String,System.EventHandler)
  id: On(System.String,System.EventHandler)
  parent: FlowR.Core.INode
  langs:
  - csharp
  - vb
  name: On(String, EventHandler)
  nameWithType: INode.On(String, EventHandler)
  fullName: FlowR.Core.INode.On(System.String, System.EventHandler)
  type: Method
  source:
    remote:
      path: FlowR.Core/INode.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: On
    path: ../FlowR.Core/INode.cs
    startLine: 175
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nStart Listen for specified eventName.\n"
  example: []
  syntax:
    content: INode On(string eventName, EventHandler handler)
    parameters:
    - id: eventName
      type: System.String
      description: ''
    - id: handler
      type: System.EventHandler
      description: ''
    return:
      type: FlowR.Core.INode
    content.vb: Function On(eventName As String, handler As EventHandler) As INode
  overload: FlowR.Core.INode.On*
- uid: FlowR.Core.INode.Off(System.String,System.EventHandler)
  commentId: M:FlowR.Core.INode.Off(System.String,System.EventHandler)
  id: Off(System.String,System.EventHandler)
  parent: FlowR.Core.INode
  langs:
  - csharp
  - vb
  name: Off(String, EventHandler)
  nameWithType: INode.Off(String, EventHandler)
  fullName: FlowR.Core.INode.Off(System.String, System.EventHandler)
  type: Method
  source:
    remote:
      path: FlowR.Core/INode.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: Off
    path: ../FlowR.Core/INode.cs
    startLine: 182
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nStop Listen for specified eventName and handler.\n"
  example: []
  syntax:
    content: INode Off(string eventName, EventHandler handler)
    parameters:
    - id: eventName
      type: System.String
      description: ''
    - id: handler
      type: System.EventHandler
      description: ''
    return:
      type: FlowR.Core.INode
    content.vb: Function Off(eventName As String, handler As EventHandler) As INode
  overload: FlowR.Core.INode.Off*
- uid: FlowR.Core.INode.Off(System.String)
  commentId: M:FlowR.Core.INode.Off(System.String)
  id: Off(System.String)
  parent: FlowR.Core.INode
  langs:
  - csharp
  - vb
  name: Off(String)
  nameWithType: INode.Off(String)
  fullName: FlowR.Core.INode.Off(System.String)
  type: Method
  source:
    remote:
      path: FlowR.Core/INode.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: Off
    path: ../FlowR.Core/INode.cs
    startLine: 188
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nStop Listen for specified eventName.\n"
  example: []
  syntax:
    content: INode Off(string eventName)
    parameters:
    - id: eventName
      type: System.String
      description: ''
    return:
      type: FlowR.Core.INode
    content.vb: Function Off(eventName As String) As INode
  overload: FlowR.Core.INode.Off*
- uid: FlowR.Core.INode.OnClientEventTriggered(System.String,System.EventArgs)
  commentId: M:FlowR.Core.INode.OnClientEventTriggered(System.String,System.EventArgs)
  id: OnClientEventTriggered(System.String,System.EventArgs)
  parent: FlowR.Core.INode
  langs:
  - csharp
  - vb
  name: OnClientEventTriggered(String, EventArgs)
  nameWithType: INode.OnClientEventTriggered(String, EventArgs)
  fullName: FlowR.Core.INode.OnClientEventTriggered(System.String, System.EventArgs)
  type: Method
  source:
    remote:
      path: FlowR.Core/INode.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: OnClientEventTriggered
    path: ../FlowR.Core/INode.cs
    startLine: 196
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nHandle incoming Node Event fired from client.\n"
  remarks: Never use this. This is called from application on incoming events
  example: []
  syntax:
    content: void OnClientEventTriggered(string eventName, EventArgs eventArgs)
    parameters:
    - id: eventName
      type: System.String
      description: ''
    - id: eventArgs
      type: System.EventArgs
      description: ''
    content.vb: Sub OnClientEventTriggered(eventName As String, eventArgs As EventArgs)
  overload: FlowR.Core.INode.OnClientEventTriggered*
- uid: FlowR.Core.INode.AddJavascriptMethod(System.String,System.String)
  commentId: M:FlowR.Core.INode.AddJavascriptMethod(System.String,System.String)
  id: AddJavascriptMethod(System.String,System.String)
  parent: FlowR.Core.INode
  langs:
  - csharp
  - vb
  name: AddJavascriptMethod(String, String)
  nameWithType: INode.AddJavascriptMethod(String, String)
  fullName: FlowR.Core.INode.AddJavascriptMethod(System.String, System.String)
  type: Method
  source:
    remote:
      path: FlowR.Core/INode.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: AddJavascriptMethod
    path: ../FlowR.Core/INode.cs
    startLine: 205
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nAdd a method to the node, don&apos;t wait for response.\nLater can be called via CallClientMethod and CallClientMethodWaitResponse\n"
  example: []
  syntax:
    content: INode AddJavascriptMethod(string methodName, string jsStatement)
    parameters:
    - id: methodName
      type: System.String
      description: ''
    - id: jsStatement
      type: System.String
      description: ''
    return:
      type: FlowR.Core.INode
    content.vb: Function AddJavascriptMethod(methodName As String, jsStatement As String) As INode
  overload: FlowR.Core.INode.AddJavascriptMethod*
- uid: FlowR.Core.INode.CallClientMethod(System.String,System.String[])
  commentId: M:FlowR.Core.INode.CallClientMethod(System.String,System.String[])
  id: CallClientMethod(System.String,System.String[])
  parent: FlowR.Core.INode
  langs:
  - csharp
  - vb
  name: CallClientMethod(String, String[])
  nameWithType: INode.CallClientMethod(String, String[])
  fullName: FlowR.Core.INode.CallClientMethod(System.String, System.String[])
  type: Method
  source:
    remote:
      path: FlowR.Core/INode.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: CallClientMethod
    path: ../FlowR.Core/INode.cs
    startLine: 212
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nCall a method on client side on this node with arguments, don&apos;t wait for response.\n"
  example: []
  syntax:
    content: INode CallClientMethod(string methodName, params string[] arguments)
    parameters:
    - id: methodName
      type: System.String
      description: ''
    - id: arguments
      type: System.String[]
      description: ''
    return:
      type: FlowR.Core.INode
    content.vb: Function CallClientMethod(methodName As String, ParamArray arguments As String()) As INode
  overload: FlowR.Core.INode.CallClientMethod*
  nameWithType.vb: INode.CallClientMethod(String, String())
  fullName.vb: FlowR.Core.INode.CallClientMethod(System.String, System.String())
  name.vb: CallClientMethod(String, String())
- uid: FlowR.Core.INode.CallClientMethodAsync(System.String,System.String[])
  commentId: M:FlowR.Core.INode.CallClientMethodAsync(System.String,System.String[])
  id: CallClientMethodAsync(System.String,System.String[])
  parent: FlowR.Core.INode
  langs:
  - csharp
  - vb
  name: CallClientMethodAsync(String, String[])
  nameWithType: INode.CallClientMethodAsync(String, String[])
  fullName: FlowR.Core.INode.CallClientMethodAsync(System.String, System.String[])
  type: Method
  source:
    remote:
      path: FlowR.Core/INode.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: CallClientMethodAsync
    path: ../FlowR.Core/INode.cs
    startLine: 220
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nReturn Response after call a method on client side on this node with arguments.\n"
  example: []
  syntax:
    content: Task<string> CallClientMethodAsync(string methodName, params string[] arguments)
    parameters:
    - id: methodName
      type: System.String
      description: ''
    - id: arguments
      type: System.String[]
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: ''
    content.vb: Function CallClientMethodAsync(methodName As String, ParamArray arguments As String()) As Task(Of String)
  overload: FlowR.Core.INode.CallClientMethodAsync*
  nameWithType.vb: INode.CallClientMethodAsync(String, String())
  fullName.vb: FlowR.Core.INode.CallClientMethodAsync(System.String, System.String())
  name.vb: CallClientMethodAsync(String, String())
- uid: FlowR.Core.INode.GetFirstOwnerOfType``1
  commentId: M:FlowR.Core.INode.GetFirstOwnerOfType``1
  id: GetFirstOwnerOfType``1
  parent: FlowR.Core.INode
  langs:
  - csharp
  - vb
  name: GetFirstOwnerOfType<T>()
  nameWithType: INode.GetFirstOwnerOfType<T>()
  fullName: FlowR.Core.INode.GetFirstOwnerOfType<T>()
  type: Method
  source:
    remote:
      path: FlowR.Core/INode.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: GetFirstOwnerOfType
    path: ../FlowR.Core/INode.cs
    startLine: 228
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nGet First INode of a specific type\n(eg. A Control get first Form Owner)\n"
  example: []
  syntax:
    content: >-
      T GetFirstOwnerOfType<T>()
          where T : INode
    typeParameters:
    - id: T
      description: ''
    return:
      type: '{T}'
      description: ''
    content.vb: Function GetFirstOwnerOfType(Of T As INode) As T
  overload: FlowR.Core.INode.GetFirstOwnerOfType*
  nameWithType.vb: INode.GetFirstOwnerOfType(Of T)()
  fullName.vb: FlowR.Core.INode.GetFirstOwnerOfType(Of T)()
  name.vb: GetFirstOwnerOfType(Of T)()
- uid: FlowR.Core.INode.GetChildrenOfType``1
  commentId: M:FlowR.Core.INode.GetChildrenOfType``1
  id: GetChildrenOfType``1
  parent: FlowR.Core.INode
  langs:
  - csharp
  - vb
  name: GetChildrenOfType<T>()
  nameWithType: INode.GetChildrenOfType<T>()
  fullName: FlowR.Core.INode.GetChildrenOfType<T>()
  type: Method
  source:
    remote:
      path: FlowR.Core/INode.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: GetChildrenOfType
    path: ../FlowR.Core/INode.cs
    startLine: 235
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nGet All children of a specific type\n"
  example: []
  syntax:
    content: >-
      List<T> GetChildrenOfType<T>()
          where T : INode
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Collections.Generic.List{{T}}
      description: ''
    content.vb: Function GetChildrenOfType(Of T As INode) As List(Of T)
  overload: FlowR.Core.INode.GetChildrenOfType*
  nameWithType.vb: INode.GetChildrenOfType(Of T)()
  fullName.vb: FlowR.Core.INode.GetChildrenOfType(Of T)()
  name.vb: GetChildrenOfType(Of T)()
- uid: FlowR.Core.INode.AddCssClass(System.String)
  commentId: M:FlowR.Core.INode.AddCssClass(System.String)
  id: AddCssClass(System.String)
  parent: FlowR.Core.INode
  langs:
  - csharp
  - vb
  name: AddCssClass(String)
  nameWithType: INode.AddCssClass(String)
  fullName: FlowR.Core.INode.AddCssClass(System.String)
  type: Method
  source:
    remote:
      path: FlowR.Core/INode.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: AddCssClass
    path: ../FlowR.Core/INode.cs
    startLine: 242
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nAdd a classname to class attribute\n"
  example: []
  syntax:
    content: INode AddCssClass(string className)
    parameters:
    - id: className
      type: System.String
      description: ''
    return:
      type: FlowR.Core.INode
      description: ''
    content.vb: Function AddCssClass(className As String) As INode
  overload: FlowR.Core.INode.AddCssClass*
- uid: FlowR.Core.INode.RemoveCssClass(System.String)
  commentId: M:FlowR.Core.INode.RemoveCssClass(System.String)
  id: RemoveCssClass(System.String)
  parent: FlowR.Core.INode
  langs:
  - csharp
  - vb
  name: RemoveCssClass(String)
  nameWithType: INode.RemoveCssClass(String)
  fullName: FlowR.Core.INode.RemoveCssClass(System.String)
  type: Method
  source:
    remote:
      path: FlowR.Core/INode.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: RemoveCssClass
    path: ../FlowR.Core/INode.cs
    startLine: 249
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nRemove a classname from class attribute\n"
  example: []
  syntax:
    content: INode RemoveCssClass(string className)
    parameters:
    - id: className
      type: System.String
      description: ''
    return:
      type: FlowR.Core.INode
      description: ''
    content.vb: Function RemoveCssClass(className As String) As INode
  overload: FlowR.Core.INode.RemoveCssClass*
references:
- uid: FlowR.Core
  commentId: N:FlowR.Core
  name: FlowR.Core
  nameWithType: FlowR.Core
  fullName: FlowR.Core
- uid: FlowR.Core.INode.GetTagName*
  commentId: Overload:FlowR.Core.INode.GetTagName
  name: GetTagName
  nameWithType: INode.GetTagName
  fullName: FlowR.Core.INode.GetTagName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: FlowR.Core.INode.GetOwner*
  commentId: Overload:FlowR.Core.INode.GetOwner
  name: GetOwner
  nameWithType: INode.GetOwner
  fullName: FlowR.Core.INode.GetOwner
- uid: FlowR.Core.INode
  commentId: T:FlowR.Core.INode
  parent: FlowR.Core
  name: INode
  nameWithType: INode
  fullName: FlowR.Core.INode
- uid: FlowR.Core.INode.SetOwner*
  commentId: Overload:FlowR.Core.INode.SetOwner
  name: SetOwner
  nameWithType: INode.SetOwner
  fullName: FlowR.Core.INode.SetOwner
- uid: FlowR.Core.INode.GetApplication*
  commentId: Overload:FlowR.Core.INode.GetApplication
  name: GetApplication
  nameWithType: INode.GetApplication
  fullName: FlowR.Core.INode.GetApplication
- uid: FlowR.Core.Application
  commentId: T:FlowR.Core.Application
  parent: FlowR.Core
  name: Application
  nameWithType: Application
  fullName: FlowR.Core.Application
- uid: FlowR.Core.INode.GetUuid*
  commentId: Overload:FlowR.Core.INode.GetUuid
  name: GetUuid
  nameWithType: INode.GetUuid
  fullName: FlowR.Core.INode.GetUuid
- uid: FlowR.Core.INode.GetAttributes*
  commentId: Overload:FlowR.Core.INode.GetAttributes
  name: GetAttributes
  nameWithType: INode.GetAttributes
  fullName: FlowR.Core.INode.GetAttributes
- uid: FlowR.Core.ObservableDictionary{System.String,System.String}
  commentId: T:FlowR.Core.ObservableDictionary{System.String,System.String}
  parent: FlowR.Core
  definition: FlowR.Core.ObservableDictionary`2
  name: ObservableDictionary<String, String>
  nameWithType: ObservableDictionary<String, String>
  fullName: FlowR.Core.ObservableDictionary<System.String, System.String>
  nameWithType.vb: ObservableDictionary(Of String, String)
  fullName.vb: FlowR.Core.ObservableDictionary(Of System.String, System.String)
  name.vb: ObservableDictionary(Of String, String)
  spec.csharp:
  - uid: FlowR.Core.ObservableDictionary`2
    name: ObservableDictionary
    nameWithType: ObservableDictionary
    fullName: FlowR.Core.ObservableDictionary
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: FlowR.Core.ObservableDictionary`2
    name: ObservableDictionary
    nameWithType: ObservableDictionary
    fullName: FlowR.Core.ObservableDictionary
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: FlowR.Core.ObservableDictionary`2
  commentId: T:FlowR.Core.ObservableDictionary`2
  name: ObservableDictionary<TKey, TValue>
  nameWithType: ObservableDictionary<TKey, TValue>
  fullName: FlowR.Core.ObservableDictionary<TKey, TValue>
  nameWithType.vb: ObservableDictionary(Of TKey, TValue)
  fullName.vb: FlowR.Core.ObservableDictionary(Of TKey, TValue)
  name.vb: ObservableDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: FlowR.Core.ObservableDictionary`2
    name: ObservableDictionary
    nameWithType: ObservableDictionary
    fullName: FlowR.Core.ObservableDictionary
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: FlowR.Core.ObservableDictionary`2
    name: ObservableDictionary
    nameWithType: ObservableDictionary
    fullName: FlowR.Core.ObservableDictionary
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: FlowR.Core.INode.GetProperties*
  commentId: Overload:FlowR.Core.INode.GetProperties
  name: GetProperties
  nameWithType: INode.GetProperties
  fullName: FlowR.Core.INode.GetProperties
- uid: FlowR.Core.INode.GetEventHandlers*
  commentId: Overload:FlowR.Core.INode.GetEventHandlers
  name: GetEventHandlers
  nameWithType: INode.GetEventHandlers
  fullName: FlowR.Core.INode.GetEventHandlers
- uid: FlowR.Core.ObservableDictionary{System.String,System.Collections.Generic.List{System.EventHandler}}
  commentId: T:FlowR.Core.ObservableDictionary{System.String,System.Collections.Generic.List{System.EventHandler}}
  parent: FlowR.Core
  definition: FlowR.Core.ObservableDictionary`2
  name: ObservableDictionary<String, List<EventHandler>>
  nameWithType: ObservableDictionary<String, List<EventHandler>>
  fullName: FlowR.Core.ObservableDictionary<System.String, System.Collections.Generic.List<System.EventHandler>>
  nameWithType.vb: ObservableDictionary(Of String, List(Of EventHandler))
  fullName.vb: FlowR.Core.ObservableDictionary(Of System.String, System.Collections.Generic.List(Of System.EventHandler))
  name.vb: ObservableDictionary(Of String, List(Of EventHandler))
  spec.csharp:
  - uid: FlowR.Core.ObservableDictionary`2
    name: ObservableDictionary
    nameWithType: ObservableDictionary
    fullName: FlowR.Core.ObservableDictionary
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.EventHandler
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: FlowR.Core.ObservableDictionary`2
    name: ObservableDictionary
    nameWithType: ObservableDictionary
    fullName: FlowR.Core.ObservableDictionary
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.EventHandler
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: FlowR.Core.INode.GetCommunication*
  commentId: Overload:FlowR.Core.INode.GetCommunication
  name: GetCommunication
  nameWithType: INode.GetCommunication
  fullName: FlowR.Core.INode.GetCommunication
- uid: FlowR.Core.ApplicationCommunication
  commentId: T:FlowR.Core.ApplicationCommunication
  parent: FlowR.Core
  name: ApplicationCommunication
  nameWithType: ApplicationCommunication
  fullName: FlowR.Core.ApplicationCommunication
- uid: FlowR.Core.INode.GetChildren*
  commentId: Overload:FlowR.Core.INode.GetChildren
  name: GetChildren
  nameWithType: INode.GetChildren
  fullName: FlowR.Core.INode.GetChildren
- uid: FlowR.Core.ObservableDictionary{System.String,FlowR.Core.INode}
  commentId: T:FlowR.Core.ObservableDictionary{System.String,FlowR.Core.INode}
  parent: FlowR.Core
  definition: FlowR.Core.ObservableDictionary`2
  name: ObservableDictionary<String, INode>
  nameWithType: ObservableDictionary<String, INode>
  fullName: FlowR.Core.ObservableDictionary<System.String, FlowR.Core.INode>
  nameWithType.vb: ObservableDictionary(Of String, INode)
  fullName.vb: FlowR.Core.ObservableDictionary(Of System.String, FlowR.Core.INode)
  name.vb: ObservableDictionary(Of String, INode)
  spec.csharp:
  - uid: FlowR.Core.ObservableDictionary`2
    name: ObservableDictionary
    nameWithType: ObservableDictionary
    fullName: FlowR.Core.ObservableDictionary
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: FlowR.Core.INode
    name: INode
    nameWithType: INode
    fullName: FlowR.Core.INode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: FlowR.Core.ObservableDictionary`2
    name: ObservableDictionary
    nameWithType: ObservableDictionary
    fullName: FlowR.Core.ObservableDictionary
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: FlowR.Core.INode
    name: INode
    nameWithType: INode
    fullName: FlowR.Core.INode
  - name: )
    nameWithType: )
    fullName: )
- uid: FlowR.Core.INode.GetText*
  commentId: Overload:FlowR.Core.INode.GetText
  name: GetText
  nameWithType: INode.GetText
  fullName: FlowR.Core.INode.GetText
- uid: FlowR.Core.INode.SetText*
  commentId: Overload:FlowR.Core.INode.SetText
  name: SetText
  nameWithType: INode.SetText
  fullName: FlowR.Core.INode.SetText
- uid: FlowR.Core.INode.Init*
  commentId: Overload:FlowR.Core.INode.Init
  name: Init
  nameWithType: INode.Init
  fullName: FlowR.Core.INode.Init
- uid: FlowR.Core.INode.SetAttribute*
  commentId: Overload:FlowR.Core.INode.SetAttribute
  name: SetAttribute
  nameWithType: INode.SetAttribute
  fullName: FlowR.Core.INode.SetAttribute
- uid: System.Collections.Generic.Dictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, String>
  nameWithType: Dictionary<String, String>
  fullName: System.Collections.Generic.Dictionary<System.String, System.String>
  nameWithType.vb: Dictionary(Of String, String)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.String)
  name.vb: Dictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: FlowR.Core.INode.GetAttribute*
  commentId: Overload:FlowR.Core.INode.GetAttribute
  name: GetAttribute
  nameWithType: INode.GetAttribute
  fullName: FlowR.Core.INode.GetAttribute
- uid: FlowR.Core.INode.RemoveAttribute*
  commentId: Overload:FlowR.Core.INode.RemoveAttribute
  name: RemoveAttribute
  nameWithType: INode.RemoveAttribute
  fullName: FlowR.Core.INode.RemoveAttribute
- uid: FlowR.Core.INode.HasAttribute*
  commentId: Overload:FlowR.Core.INode.HasAttribute
  name: HasAttribute
  nameWithType: INode.HasAttribute
  fullName: FlowR.Core.INode.HasAttribute
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: FlowR.Core.INode.SetProperty*
  commentId: Overload:FlowR.Core.INode.SetProperty
  name: SetProperty
  nameWithType: INode.SetProperty
  fullName: FlowR.Core.INode.SetProperty
- uid: FlowR.Core.INode.GetProperty*
  commentId: Overload:FlowR.Core.INode.GetProperty
  name: GetProperty
  nameWithType: INode.GetProperty
  fullName: FlowR.Core.INode.GetProperty
- uid: FlowR.Core.INode.GetPropertyAsync*
  commentId: Overload:FlowR.Core.INode.GetPropertyAsync
  name: GetPropertyAsync
  nameWithType: INode.GetPropertyAsync
  fullName: FlowR.Core.INode.GetPropertyAsync
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: FlowR.Core.INode.Add*
  commentId: Overload:FlowR.Core.INode.Add
  name: Add
  nameWithType: INode.Add
  fullName: FlowR.Core.INode.Add
- uid: '{TNodeComponent}'
  commentId: '!:TNodeComponent'
  definition: TNodeComponent
  name: TNodeComponent
  nameWithType: TNodeComponent
  fullName: TNodeComponent
- uid: TNodeComponent
  name: TNodeComponent
  nameWithType: TNodeComponent
  fullName: TNodeComponent
- uid: '{TNodeControl}'
  commentId: '!:TNodeControl'
  definition: TNodeControl
  name: TNodeControl
  nameWithType: TNodeControl
  fullName: TNodeControl
- uid: TNodeControl
  name: TNodeControl
  nameWithType: TNodeControl
  fullName: TNodeControl
- uid: FlowR.Core.INode.Remove*
  commentId: Overload:FlowR.Core.INode.Remove
  name: Remove
  nameWithType: INode.Remove
  fullName: FlowR.Core.INode.Remove
- uid: FlowR.Core.INode.On*
  commentId: Overload:FlowR.Core.INode.On
  name: On
  nameWithType: INode.On
  fullName: FlowR.Core.INode.On
- uid: System.EventHandler
  commentId: T:System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: FlowR.Core.INode.Off*
  commentId: Overload:FlowR.Core.INode.Off
  name: Off
  nameWithType: INode.Off
  fullName: FlowR.Core.INode.Off
- uid: FlowR.Core.INode.OnClientEventTriggered*
  commentId: Overload:FlowR.Core.INode.OnClientEventTriggered
  name: OnClientEventTriggered
  nameWithType: INode.OnClientEventTriggered
  fullName: FlowR.Core.INode.OnClientEventTriggered
- uid: System.EventArgs
  commentId: T:System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: FlowR.Core.INode.AddJavascriptMethod*
  commentId: Overload:FlowR.Core.INode.AddJavascriptMethod
  name: AddJavascriptMethod
  nameWithType: INode.AddJavascriptMethod
  fullName: FlowR.Core.INode.AddJavascriptMethod
- uid: FlowR.Core.INode.CallClientMethod*
  commentId: Overload:FlowR.Core.INode.CallClientMethod
  name: CallClientMethod
  nameWithType: INode.CallClientMethod
  fullName: FlowR.Core.INode.CallClientMethod
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: FlowR.Core.INode.CallClientMethodAsync*
  commentId: Overload:FlowR.Core.INode.CallClientMethodAsync
  name: CallClientMethodAsync
  nameWithType: INode.CallClientMethodAsync
  fullName: FlowR.Core.INode.CallClientMethodAsync
- uid: FlowR.Core.INode.GetFirstOwnerOfType*
  commentId: Overload:FlowR.Core.INode.GetFirstOwnerOfType
  name: GetFirstOwnerOfType
  nameWithType: INode.GetFirstOwnerOfType
  fullName: FlowR.Core.INode.GetFirstOwnerOfType
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: FlowR.Core.INode.GetChildrenOfType*
  commentId: Overload:FlowR.Core.INode.GetChildrenOfType
  name: GetChildrenOfType
  nameWithType: INode.GetChildrenOfType
  fullName: FlowR.Core.INode.GetChildrenOfType
- uid: System.Collections.Generic.List{{T}}
  commentId: T:System.Collections.Generic.List{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: FlowR.Core.INode.AddCssClass*
  commentId: Overload:FlowR.Core.INode.AddCssClass
  name: AddCssClass
  nameWithType: INode.AddCssClass
  fullName: FlowR.Core.INode.AddCssClass
- uid: FlowR.Core.INode.RemoveCssClass*
  commentId: Overload:FlowR.Core.INode.RemoveCssClass
  name: RemoveCssClass
  nameWithType: INode.RemoveCssClass
  fullName: FlowR.Core.INode.RemoveCssClass
