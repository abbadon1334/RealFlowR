### YamlMime:ManagedReference
items:
- uid: FlowR.Core.Node
  commentId: T:FlowR.Core.Node
  id: Node
  parent: FlowR.Core
  children:
  - FlowR.Core.Node.#ctor
  - FlowR.Core.Node._Off(System.String,EventHandler)
  - FlowR.Core.Node._On(System.String,EventHandler)
  - FlowR.Core.Node._RemoveAttribute(System.String)
  - FlowR.Core.Node._SetAttribute(System.String,System.String)
  - FlowR.Core.Node._SetProperty(System.String,System.String)
  - FlowR.Core.Node._SetText(System.String)
  - FlowR.Core.Node.Add(FlowR.Core.Node)
  - FlowR.Core.Node.Add``1(KeyValuePair{System.String,System.String}[])
  - FlowR.Core.Node.Add``1(System.String,KeyValuePair{System.String,System.String}[])
  - FlowR.Core.Node.AddClientJavascriptMethod(System.String,System.String)
  - FlowR.Core.Node.Application
  - FlowR.Core.Node.CallClientMethod(System.String,System.String[])
  - FlowR.Core.Node.CallClientMethodWaitResponse(System.String,System.String[])
  - FlowR.Core.Node.GetAttributeDictionary
  - FlowR.Core.Node.GetChildrenCount
  - FlowR.Core.Node.GetFirstChild
  - FlowR.Core.Node.GetLastChild
  - FlowR.Core.Node.GetProperty(System.String)
  - FlowR.Core.Node.HasAttribute(System.String)
  - FlowR.Core.Node.Init
  - FlowR.Core.Node.IsInitialized
  - FlowR.Core.Node.OnClientEventTriggered(System.String,FlowR.Core.Message.MessageEventArgs)
  - FlowR.Core.Node.Owner
  - FlowR.Core.Node.Remove(FlowR.Core.Node)
  - FlowR.Core.Node.TagName
  - FlowR.Core.Node.Text
  - FlowR.Core.Node.Uuid
  - FlowR.Core.Node.Value
  langs:
  - csharp
  - vb
  name: Node
  nameWithType: Node
  fullName: FlowR.Core.Node
  type: Class
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: Node
    path: FlowR.Core/Node.cs
    startLine: 10
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nDomNode base class\n"
  example: []
  syntax:
    content: 'public abstract class Node : object'
    content.vb: >-
      Public MustInherit Class Node

          Inherits Object
  inheritance:
  - System.Object
  derivedClasses:
  - FlowR.Core.Component`1
  - FlowR.Core.ComponentRoot
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: FlowR.Core.Node.#ctor
  commentId: M:FlowR.Core.Node.#ctor
  id: '#ctor'
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: Node()
  nameWithType: Node.Node()
  fullName: FlowR.Core.Node.Node()
  type: Constructor
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: .ctor
    path: FlowR.Core/Node.cs
    startLine: 26
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nConstructor\n"
  example: []
  syntax:
    content: protected Node()
    content.vb: Protected Sub New
  overload: FlowR.Core.Node.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: FlowR.Core.Node.TagName
  commentId: P:FlowR.Core.Node.TagName
  id: TagName
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: TagName
  nameWithType: Node.TagName
  fullName: FlowR.Core.Node.TagName
  type: Property
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: TagName
    path: FlowR.Core/Node.cs
    startLine: 36
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nTagName of the Node : any HTML valid tag name is permitted.\n"
  example: []
  syntax:
    content: public abstract string TagName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public MustOverride ReadOnly Property TagName As String
  overload: FlowR.Core.Node.TagName*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: FlowR.Core.Node.Application
  commentId: P:FlowR.Core.Node.Application
  id: Application
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: Application
  nameWithType: Node.Application
  fullName: FlowR.Core.Node.Application
  type: Property
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: Application
    path: FlowR.Core/Node.cs
    startLine: 41
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nThe Client Application.\n"
  example: []
  syntax:
    content: public Application Application { get; set; }
    parameters: []
    return:
      type: FlowR.Core.Application
    content.vb: Public Property Application As Application
  overload: FlowR.Core.Node.Application*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: FlowR.Core.Node.Owner
  commentId: P:FlowR.Core.Node.Owner
  id: Owner
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: Owner
  nameWithType: Node.Owner
  fullName: FlowR.Core.Node.Owner
  type: Property
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: Owner
    path: FlowR.Core/Node.cs
    startLine: 46
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nDomNode parent\n"
  example: []
  syntax:
    content: public Node Owner { get; set; }
    parameters: []
    return:
      type: FlowR.Core.Node
    content.vb: Public Property Owner As Node
  overload: FlowR.Core.Node.Owner*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: FlowR.Core.Node.Uuid
  commentId: P:FlowR.Core.Node.Uuid
  id: Uuid
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: Uuid
  nameWithType: Node.Uuid
  fullName: FlowR.Core.Node.Uuid
  type: Property
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: Uuid
    path: FlowR.Core/Node.cs
    startLine: 52
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nUnique identifier of the Node\n"
  example: []
  syntax:
    content: public string Uuid { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Uuid As String
  overload: FlowR.Core.Node.Uuid*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: FlowR.Core.Node._SetProperty(System.String,System.String)
  commentId: M:FlowR.Core.Node._SetProperty(System.String,System.String)
  id: _SetProperty(System.String,System.String)
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: _SetProperty(String, String)
  nameWithType: Node._SetProperty(String, String)
  fullName: FlowR.Core.Node._SetProperty(System.String, System.String)
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: _SetProperty
    path: FlowR.Core/Node.cs
    startLine: 132
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nSet Node property on client side.\n"
  example: []
  syntax:
    content: protected void _SetProperty(string name, string value)
    parameters:
    - id: name
      type: System.String
      description: ''
    - id: value
      type: System.String
      description: ''
    content.vb: Protected Sub _SetProperty(name As String, value As String)
  overload: FlowR.Core.Node._SetProperty*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: FlowR.Core.Node.GetProperty(System.String)
  commentId: M:FlowR.Core.Node.GetProperty(System.String)
  id: GetProperty(System.String)
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: GetProperty(String)
  nameWithType: Node.GetProperty(String)
  fullName: FlowR.Core.Node.GetProperty(System.String)
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: GetProperty
    path: FlowR.Core/Node.cs
    startLine: 142
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nGet Node property from client.\n"
  example: []
  syntax:
    content: public Task<string> GetProperty(string path)
    parameters:
    - id: path
      type: System.String
      description: ''
    return:
      type: Task{System.String}
      description: ''
    content.vb: Public Function GetProperty(path As String) As Task(Of String)
  overload: FlowR.Core.Node.GetProperty*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FlowR.Core.Node._On(System.String,EventHandler)
  commentId: M:FlowR.Core.Node._On(System.String,EventHandler)
  id: _On(System.String,EventHandler)
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: _On(String, EventHandler)
  nameWithType: Node._On(String, EventHandler)
  fullName: FlowR.Core.Node._On(System.String, EventHandler)
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: _On
    path: FlowR.Core/Node.cs
    startLine: 157
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nStart Listen for specified eventName.\n"
  example: []
  syntax:
    content: protected void _On(string eventName, EventHandler handler)
    parameters:
    - id: eventName
      type: System.String
      description: ''
    - id: handler
      type: EventHandler
      description: ''
    content.vb: Protected Sub _On(eventName As String, handler As EventHandler)
  overload: FlowR.Core.Node._On*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: FlowR.Core.Node._Off(System.String,EventHandler)
  commentId: M:FlowR.Core.Node._Off(System.String,EventHandler)
  id: _Off(System.String,EventHandler)
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: _Off(String, EventHandler)
  nameWithType: Node._Off(String, EventHandler)
  fullName: FlowR.Core.Node._Off(System.String, EventHandler)
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: _Off
    path: FlowR.Core/Node.cs
    startLine: 167
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nStop Listen for specified eventName.\n"
  example: []
  syntax:
    content: protected void _Off(string eventName, EventHandler handler)
    parameters:
    - id: eventName
      type: System.String
      description: ''
    - id: handler
      type: EventHandler
      description: ''
    content.vb: Protected Sub _Off(eventName As String, handler As EventHandler)
  overload: FlowR.Core.Node._Off*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: FlowR.Core.Node.OnClientEventTriggered(System.String,FlowR.Core.Message.MessageEventArgs)
  commentId: M:FlowR.Core.Node.OnClientEventTriggered(System.String,FlowR.Core.Message.MessageEventArgs)
  id: OnClientEventTriggered(System.String,FlowR.Core.Message.MessageEventArgs)
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: OnClientEventTriggered(String, MessageEventArgs)
  nameWithType: Node.OnClientEventTriggered(String, MessageEventArgs)
  fullName: FlowR.Core.Node.OnClientEventTriggered(System.String, FlowR.Core.Message.MessageEventArgs)
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: OnClientEventTriggered
    path: FlowR.Core/Node.cs
    startLine: 178
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nHandle incoming Node Event fired from client.\n"
  remarks: Never use this. This is called from application on incoming events
  example: []
  syntax:
    content: public void OnClientEventTriggered(string eventName, MessageEventArgs eventArgs)
    parameters:
    - id: eventName
      type: System.String
      description: ''
    - id: eventArgs
      type: FlowR.Core.Message.MessageEventArgs
      description: ''
    content.vb: Public Sub OnClientEventTriggered(eventName As String, eventArgs As MessageEventArgs)
  overload: FlowR.Core.Node.OnClientEventTriggered*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FlowR.Core.Node.AddClientJavascriptMethod(System.String,System.String)
  commentId: M:FlowR.Core.Node.AddClientJavascriptMethod(System.String,System.String)
  id: AddClientJavascriptMethod(System.String,System.String)
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: AddClientJavascriptMethod(String, String)
  nameWithType: Node.AddClientJavascriptMethod(String, String)
  fullName: FlowR.Core.Node.AddClientJavascriptMethod(System.String, System.String)
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: AddClientJavascriptMethod
    path: FlowR.Core/Node.cs
    startLine: 205
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nAdd a method to the node, don&apos;t wait for response.\nLater can be called via CallClientMethod and CallClientMethodWaitResponse\n"
  example: []
  syntax:
    content: public void AddClientJavascriptMethod(string methodName, string jsStatement)
    parameters:
    - id: methodName
      type: System.String
      description: ''
    - id: jsStatement
      type: System.String
      description: ''
    content.vb: Public Sub AddClientJavascriptMethod(methodName As String, jsStatement As String)
  overload: FlowR.Core.Node.AddClientJavascriptMethod*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FlowR.Core.Node.CallClientMethod(System.String,System.String[])
  commentId: M:FlowR.Core.Node.CallClientMethod(System.String,System.String[])
  id: CallClientMethod(System.String,System.String[])
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: CallClientMethod(String, String[])
  nameWithType: Node.CallClientMethod(String, String[])
  fullName: FlowR.Core.Node.CallClientMethod(System.String, System.String[])
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: CallClientMethod
    path: FlowR.Core/Node.cs
    startLine: 215
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nCall a method on client side on this node with arguments, don&apos;t wait for response.\n"
  example: []
  syntax:
    content: public void CallClientMethod(string methodName, params string[] arguments)
    parameters:
    - id: methodName
      type: System.String
      description: ''
    - id: arguments
      type: System.String[]
      description: ''
    content.vb: Public Sub CallClientMethod(methodName As String, ParamArray arguments As String())
  overload: FlowR.Core.Node.CallClientMethod*
  nameWithType.vb: Node.CallClientMethod(String, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FlowR.Core.Node.CallClientMethod(System.String, System.String())
  name.vb: CallClientMethod(String, String())
- uid: FlowR.Core.Node.CallClientMethodWaitResponse(System.String,System.String[])
  commentId: M:FlowR.Core.Node.CallClientMethodWaitResponse(System.String,System.String[])
  id: CallClientMethodWaitResponse(System.String,System.String[])
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: CallClientMethodWaitResponse(String, String[])
  nameWithType: Node.CallClientMethodWaitResponse(String, String[])
  fullName: FlowR.Core.Node.CallClientMethodWaitResponse(System.String, System.String[])
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: CallClientMethodWaitResponse
    path: FlowR.Core/Node.cs
    startLine: 226
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nReturn Response after call a method on client side on this node with arguments.\n"
  example: []
  syntax:
    content: public Task<string> CallClientMethodWaitResponse(string methodName, params string[] arguments)
    parameters:
    - id: methodName
      type: System.String
      description: ''
    - id: arguments
      type: System.String[]
      description: ''
    return:
      type: Task{System.String}
      description: ''
    content.vb: Public Function CallClientMethodWaitResponse(methodName As String, ParamArray arguments As String()) As Task(Of String)
  overload: FlowR.Core.Node.CallClientMethodWaitResponse*
  nameWithType.vb: Node.CallClientMethodWaitResponse(String, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FlowR.Core.Node.CallClientMethodWaitResponse(System.String, System.String())
  name.vb: CallClientMethodWaitResponse(String, String())
- uid: FlowR.Core.Node.GetChildrenCount
  commentId: M:FlowR.Core.Node.GetChildrenCount
  id: GetChildrenCount
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: GetChildrenCount()
  nameWithType: Node.GetChildrenCount()
  fullName: FlowR.Core.Node.GetChildrenCount()
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: GetChildrenCount
    path: FlowR.Core/Node.cs
    startLine: 240
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nReturn count of children node attached.\n"
  example: []
  syntax:
    content: public int GetChildrenCount()
    return:
      type: System.Int32
      description: ''
    content.vb: Public Function GetChildrenCount As Integer
  overload: FlowR.Core.Node.GetChildrenCount*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FlowR.Core.Node.GetFirstChild
  commentId: M:FlowR.Core.Node.GetFirstChild
  id: GetFirstChild
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: GetFirstChild()
  nameWithType: Node.GetFirstChild()
  fullName: FlowR.Core.Node.GetFirstChild()
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: GetFirstChild
    path: FlowR.Core/Node.cs
    startLine: 249
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nGet first child node from attached children.\n"
  example: []
  syntax:
    content: public Node GetFirstChild()
    return:
      type: FlowR.Core.Node
      description: ''
    content.vb: Public Function GetFirstChild As Node
  overload: FlowR.Core.Node.GetFirstChild*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FlowR.Core.Node.GetLastChild
  commentId: M:FlowR.Core.Node.GetLastChild
  id: GetLastChild
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: GetLastChild()
  nameWithType: Node.GetLastChild()
  fullName: FlowR.Core.Node.GetLastChild()
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: GetLastChild
    path: FlowR.Core/Node.cs
    startLine: 258
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nGet last child node from attached children.\n"
  example: []
  syntax:
    content: public Node GetLastChild()
    return:
      type: FlowR.Core.Node
      description: ''
    content.vb: Public Function GetLastChild As Node
  overload: FlowR.Core.Node.GetLastChild*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FlowR.Core.Node.Add(FlowR.Core.Node)
  commentId: M:FlowR.Core.Node.Add(FlowR.Core.Node)
  id: Add(FlowR.Core.Node)
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: Add(Node)
  nameWithType: Node.Add(Node)
  fullName: FlowR.Core.Node.Add(FlowR.Core.Node)
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: Add
    path: FlowR.Core/Node.cs
    startLine: 269
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nAttach a node to children.\n"
  example: []
  syntax:
    content: protected Node Add(Node node)
    parameters:
    - id: node
      type: FlowR.Core.Node
      description: ''
    return:
      type: FlowR.Core.Node
      description: ''
    content.vb: Protected Function Add(node As Node) As Node
  overload: FlowR.Core.Node.Add*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: FlowR.Core.Node.Remove(FlowR.Core.Node)
  commentId: M:FlowR.Core.Node.Remove(FlowR.Core.Node)
  id: Remove(FlowR.Core.Node)
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: Remove(Node)
  nameWithType: Node.Remove(Node)
  fullName: FlowR.Core.Node.Remove(FlowR.Core.Node)
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: Remove
    path: FlowR.Core/Node.cs
    startLine: 280
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nRemove children from node children.\n"
  example: []
  syntax:
    content: public void Remove(Node node)
    parameters:
    - id: node
      type: FlowR.Core.Node
      description: ''
    content.vb: Public Sub Remove(node As Node)
  overload: FlowR.Core.Node.Remove*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FlowR.Core.Node.Add``1(KeyValuePair{System.String,System.String}[])
  commentId: M:FlowR.Core.Node.Add``1(KeyValuePair{System.String,System.String}[])
  id: Add``1(KeyValuePair{System.String,System.String}[])
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: Add<TNode>(KeyValuePair<String, String>[])
  nameWithType: Node.Add<TNode>(KeyValuePair<String, String>[])
  fullName: FlowR.Core.Node.Add<TNode>(KeyValuePair<System.String, System.String>[])
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: Add
    path: FlowR.Core/Node.cs
    startLine: 289
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nAttach a node to children.\n"
  example: []
  syntax:
    content: >-
      public TNode Add<TNode>(params KeyValuePair<string, string>[] attributes)

          where TNode : ComponentElement<TNode>, new()
    parameters:
    - id: attributes
      type: KeyValuePair{System.String,System.String}[]
    typeParameters:
    - id: TNode
    return:
      type: '{TNode}'
      description: ''
    content.vb: Public Function Add(Of TNode As {ComponentElement(Of TNode), New})(ParamArray attributes As KeyValuePair(Of String, String)()) As TNode
  overload: FlowR.Core.Node.Add*
  nameWithType.vb: Node.Add(Of TNode)(KeyValuePair(Of String, String)())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FlowR.Core.Node.Add(Of TNode)(KeyValuePair(Of System.String, System.String)())
  name.vb: Add(Of TNode)(KeyValuePair(Of String, String)())
- uid: FlowR.Core.Node.Add``1(System.String,KeyValuePair{System.String,System.String}[])
  commentId: M:FlowR.Core.Node.Add``1(System.String,KeyValuePair{System.String,System.String}[])
  id: Add``1(System.String,KeyValuePair{System.String,System.String}[])
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: Add<TNode>(String, KeyValuePair<String, String>[])
  nameWithType: Node.Add<TNode>(String, KeyValuePair<String, String>[])
  fullName: FlowR.Core.Node.Add<TNode>(System.String, KeyValuePair<System.String, System.String>[])
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: Add
    path: FlowR.Core/Node.cs
    startLine: 304
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nAttach a node to children.\n"
  example: []
  syntax:
    content: >-
      public TNode Add<TNode>(string name, params KeyValuePair<string, string>[] attributes)

          where TNode : ComponentControl<TNode>, IComponentControl, new()
    parameters:
    - id: name
      type: System.String
    - id: attributes
      type: KeyValuePair{System.String,System.String}[]
    typeParameters:
    - id: TNode
    return:
      type: '{TNode}'
      description: ''
    content.vb: Public Function Add(Of TNode As {ComponentControl(Of TNode), IComponentControl, New})(name As String, ParamArray attributes As KeyValuePair(Of String, String)()) As TNode
  overload: FlowR.Core.Node.Add*
  nameWithType.vb: Node.Add(Of TNode)(String, KeyValuePair(Of String, String)())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FlowR.Core.Node.Add(Of TNode)(System.String, KeyValuePair(Of System.String, System.String)())
  name.vb: Add(Of TNode)(String, KeyValuePair(Of String, String)())
- uid: FlowR.Core.Node._SetAttribute(System.String,System.String)
  commentId: M:FlowR.Core.Node._SetAttribute(System.String,System.String)
  id: _SetAttribute(System.String,System.String)
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: _SetAttribute(String, String)
  nameWithType: Node._SetAttribute(String, String)
  fullName: FlowR.Core.Node._SetAttribute(System.String, System.String)
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: _SetAttribute
    path: FlowR.Core/Node.cs
    startLine: 327
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nSet Attribute of the node.\n"
  example: []
  syntax:
    content: protected Node _SetAttribute(string name, string value)
    parameters:
    - id: name
      type: System.String
      description: ''
    - id: value
      type: System.String
      description: ''
    return:
      type: FlowR.Core.Node
      description: ''
    content.vb: Protected Function _SetAttribute(name As String, value As String) As Node
  overload: FlowR.Core.Node._SetAttribute*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: FlowR.Core.Node.HasAttribute(System.String)
  commentId: M:FlowR.Core.Node.HasAttribute(System.String)
  id: HasAttribute(System.String)
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: HasAttribute(String)
  nameWithType: Node.HasAttribute(String)
  fullName: FlowR.Core.Node.HasAttribute(System.String)
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: HasAttribute
    path: FlowR.Core/Node.cs
    startLine: 339
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nReturn if Attribute already exists.\n"
  example: []
  syntax:
    content: public bool HasAttribute(string name)
    parameters:
    - id: name
      type: System.String
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function HasAttribute(name As String) As Boolean
  overload: FlowR.Core.Node.HasAttribute*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FlowR.Core.Node._RemoveAttribute(System.String)
  commentId: M:FlowR.Core.Node._RemoveAttribute(System.String)
  id: _RemoveAttribute(System.String)
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: _RemoveAttribute(String)
  nameWithType: Node._RemoveAttribute(String)
  fullName: FlowR.Core.Node._RemoveAttribute(System.String)
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: _RemoveAttribute
    path: FlowR.Core/Node.cs
    startLine: 348
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nRemove an Attribute.\n"
  example: []
  syntax:
    content: protected void _RemoveAttribute(string name)
    parameters:
    - id: name
      type: System.String
      description: ''
    content.vb: Protected Sub _RemoveAttribute(name As String)
  overload: FlowR.Core.Node._RemoveAttribute*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: FlowR.Core.Node.GetAttributeDictionary
  commentId: M:FlowR.Core.Node.GetAttributeDictionary
  id: GetAttributeDictionary
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: GetAttributeDictionary()
  nameWithType: Node.GetAttributeDictionary()
  fullName: FlowR.Core.Node.GetAttributeDictionary()
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: GetAttributeDictionary
    path: FlowR.Core/Node.cs
    startLine: 357
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nReturn Attributes as Dictionary.\n"
  example: []
  syntax:
    content: public Dictionary<string, string> GetAttributeDictionary()
    return:
      type: Dictionary{System.String,System.String}
      description: ''
    content.vb: Public Function GetAttributeDictionary As Dictionary(Of String, String)
  overload: FlowR.Core.Node.GetAttributeDictionary*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FlowR.Core.Node.Init
  commentId: M:FlowR.Core.Node.Init
  id: Init
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: Init()
  nameWithType: Node.Init()
  fullName: FlowR.Core.Node.Init()
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: Init
    path: FlowR.Core/Node.cs
    startLine: 374
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nStarting point of every component.\nWill be called after attach to Parent.\nThis is the method you are looking for if you want to make a component\n"
  example: []
  syntax:
    content: public virtual void Init()
    content.vb: Public Overridable Sub Init
  overload: FlowR.Core.Node.Init*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: FlowR.Core.Node.IsInitialized
  commentId: M:FlowR.Core.Node.IsInitialized
  id: IsInitialized
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: IsInitialized()
  nameWithType: Node.IsInitialized()
  fullName: FlowR.Core.Node.IsInitialized()
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: IsInitialized
    path: FlowR.Core/Node.cs
    startLine: 385
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nReturn if the DomNode is initialized.\n"
  example: []
  syntax:
    content: protected bool IsInitialized()
    return:
      type: System.Boolean
      description: ''
    content.vb: Protected Function IsInitialized As Boolean
  overload: FlowR.Core.Node.IsInitialized*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: FlowR.Core.Node.Text
  commentId: P:FlowR.Core.Node.Text
  id: Text
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: Text
  nameWithType: Node.Text
  fullName: FlowR.Core.Node.Text
  type: Property
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: Text
    path: FlowR.Core/Node.cs
    startLine: 398
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nContent Text of the element\n"
  example: []
  syntax:
    content: public string Text { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Text As String
  overload: FlowR.Core.Node.Text*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: FlowR.Core.Node._SetText(System.String)
  commentId: M:FlowR.Core.Node._SetText(System.String)
  id: _SetText(System.String)
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: _SetText(String)
  nameWithType: Node._SetText(String)
  fullName: FlowR.Core.Node._SetText(System.String)
  type: Method
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: _SetText
    path: FlowR.Core/Node.cs
    startLine: 414
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nFluent Set Text\n"
  example: []
  syntax:
    content: protected Node _SetText(string text)
    parameters:
    - id: text
      type: System.String
      description: ''
    return:
      type: FlowR.Core.Node
      description: ''
    content.vb: Protected Function _SetText(text As String) As Node
  overload: FlowR.Core.Node._SetText*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: FlowR.Core.Node.Value
  commentId: P:FlowR.Core.Node.Value
  id: Value
  parent: FlowR.Core.Node
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: Node.Value
  fullName: FlowR.Core.Node.Value
  type: Property
  source:
    remote:
      path: FlowR.Core/Node.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: Value
    path: FlowR.Core/Node.cs
    startLine: 429
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nValue\n"
  example: []
  syntax:
    content: public string Value { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Value As String
  overload: FlowR.Core.Node.Value*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: FlowR.Core
  commentId: N:FlowR.Core
  name: FlowR.Core
  nameWithType: FlowR.Core
  fullName: FlowR.Core
- uid: FlowR.Core.Node.#ctor*
  commentId: Overload:FlowR.Core.Node.#ctor
  name: Node
  nameWithType: Node.Node
  fullName: FlowR.Core.Node.Node
- uid: FlowR.Core.Node.TagName*
  commentId: Overload:FlowR.Core.Node.TagName
  name: TagName
  nameWithType: Node.TagName
  fullName: FlowR.Core.Node.TagName
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: FlowR.Core.Node.Application*
  commentId: Overload:FlowR.Core.Node.Application
  name: Application
  nameWithType: Node.Application
  fullName: FlowR.Core.Node.Application
- uid: FlowR.Core.Application
  commentId: T:FlowR.Core.Application
  parent: FlowR.Core
  name: Application
  nameWithType: Application
  fullName: FlowR.Core.Application
- uid: FlowR.Core.Node.Owner*
  commentId: Overload:FlowR.Core.Node.Owner
  name: Owner
  nameWithType: Node.Owner
  fullName: FlowR.Core.Node.Owner
- uid: FlowR.Core.Node
  commentId: T:FlowR.Core.Node
  parent: FlowR.Core
  name: Node
  nameWithType: Node
  fullName: FlowR.Core.Node
- uid: FlowR.Core.Node.Uuid*
  commentId: Overload:FlowR.Core.Node.Uuid
  name: Uuid
  nameWithType: Node.Uuid
  fullName: FlowR.Core.Node.Uuid
- uid: FlowR.Core.Node._SetProperty*
  commentId: Overload:FlowR.Core.Node._SetProperty
  name: _SetProperty
  nameWithType: Node._SetProperty
  fullName: FlowR.Core.Node._SetProperty
- uid: FlowR.Core.Node.GetProperty*
  commentId: Overload:FlowR.Core.Node.GetProperty
  name: GetProperty
  nameWithType: Node.GetProperty
  fullName: FlowR.Core.Node.GetProperty
- uid: Task{System.String}
  commentId: '!:Task{System.String}'
  definition: Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: FlowR.Core.Node._On*
  commentId: Overload:FlowR.Core.Node._On
  name: _On
  nameWithType: Node._On
  fullName: FlowR.Core.Node._On
- uid: EventHandler
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: EventHandler
- uid: FlowR.Core.Node._Off*
  commentId: Overload:FlowR.Core.Node._Off
  name: _Off
  nameWithType: Node._Off
  fullName: FlowR.Core.Node._Off
- uid: FlowR.Core.Node.OnClientEventTriggered*
  commentId: Overload:FlowR.Core.Node.OnClientEventTriggered
  name: OnClientEventTriggered
  nameWithType: Node.OnClientEventTriggered
  fullName: FlowR.Core.Node.OnClientEventTriggered
- uid: FlowR.Core.Message.MessageEventArgs
  commentId: T:FlowR.Core.Message.MessageEventArgs
  parent: FlowR.Core.Message
  name: MessageEventArgs
  nameWithType: MessageEventArgs
  fullName: FlowR.Core.Message.MessageEventArgs
- uid: FlowR.Core.Message
  commentId: N:FlowR.Core.Message
  name: FlowR.Core.Message
  nameWithType: FlowR.Core.Message
  fullName: FlowR.Core.Message
- uid: FlowR.Core.Node.AddClientJavascriptMethod*
  commentId: Overload:FlowR.Core.Node.AddClientJavascriptMethod
  name: AddClientJavascriptMethod
  nameWithType: Node.AddClientJavascriptMethod
  fullName: FlowR.Core.Node.AddClientJavascriptMethod
- uid: FlowR.Core.Node.CallClientMethod*
  commentId: Overload:FlowR.Core.Node.CallClientMethod
  name: CallClientMethod
  nameWithType: Node.CallClientMethod
  fullName: FlowR.Core.Node.CallClientMethod
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: FlowR.Core.Node.CallClientMethodWaitResponse*
  commentId: Overload:FlowR.Core.Node.CallClientMethodWaitResponse
  name: CallClientMethodWaitResponse
  nameWithType: Node.CallClientMethodWaitResponse
  fullName: FlowR.Core.Node.CallClientMethodWaitResponse
- uid: FlowR.Core.Node.GetChildrenCount*
  commentId: Overload:FlowR.Core.Node.GetChildrenCount
  name: GetChildrenCount
  nameWithType: Node.GetChildrenCount
  fullName: FlowR.Core.Node.GetChildrenCount
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: FlowR.Core.Node.GetFirstChild*
  commentId: Overload:FlowR.Core.Node.GetFirstChild
  name: GetFirstChild
  nameWithType: Node.GetFirstChild
  fullName: FlowR.Core.Node.GetFirstChild
- uid: FlowR.Core.Node.GetLastChild*
  commentId: Overload:FlowR.Core.Node.GetLastChild
  name: GetLastChild
  nameWithType: Node.GetLastChild
  fullName: FlowR.Core.Node.GetLastChild
- uid: FlowR.Core.Node.Add*
  commentId: Overload:FlowR.Core.Node.Add
  name: Add
  nameWithType: Node.Add
  fullName: FlowR.Core.Node.Add
- uid: FlowR.Core.Node.Remove*
  commentId: Overload:FlowR.Core.Node.Remove
  name: Remove
  nameWithType: Node.Remove
  fullName: FlowR.Core.Node.Remove
- uid: KeyValuePair{System.String,System.String}[]
  isExternal: true
  name: KeyValuePair<String, String>[]
  nameWithType: KeyValuePair<String, String>[]
  fullName: KeyValuePair<System.String, System.String>[]
  nameWithType.vb: KeyValuePair(Of String, String)()
  fullName.vb: KeyValuePair(Of System.String, System.String)()
  name.vb: KeyValuePair(Of String, String)()
  spec.csharp:
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: '{TNode}'
  commentId: '!:TNode'
  definition: TNode
  name: TNode
  nameWithType: TNode
  fullName: TNode
- uid: TNode
  name: TNode
  nameWithType: TNode
  fullName: TNode
- uid: FlowR.Core.Node._SetAttribute*
  commentId: Overload:FlowR.Core.Node._SetAttribute
  name: _SetAttribute
  nameWithType: Node._SetAttribute
  fullName: FlowR.Core.Node._SetAttribute
- uid: FlowR.Core.Node.HasAttribute*
  commentId: Overload:FlowR.Core.Node.HasAttribute
  name: HasAttribute
  nameWithType: Node.HasAttribute
  fullName: FlowR.Core.Node.HasAttribute
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: FlowR.Core.Node._RemoveAttribute*
  commentId: Overload:FlowR.Core.Node._RemoveAttribute
  name: _RemoveAttribute
  nameWithType: Node._RemoveAttribute
  fullName: FlowR.Core.Node._RemoveAttribute
- uid: FlowR.Core.Node.GetAttributeDictionary*
  commentId: Overload:FlowR.Core.Node.GetAttributeDictionary
  name: GetAttributeDictionary
  nameWithType: Node.GetAttributeDictionary
  fullName: FlowR.Core.Node.GetAttributeDictionary
- uid: Dictionary{System.String,System.String}
  commentId: '!:Dictionary{System.String,System.String}'
  definition: Dictionary`2
  name: Dictionary<String, String>
  nameWithType: Dictionary<String, String>
  fullName: Dictionary<System.String, System.String>
  nameWithType.vb: Dictionary(Of String, String)
  fullName.vb: Dictionary(Of System.String, System.String)
  name.vb: Dictionary(Of String, String)
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Dictionary`2
  isExternal: true
  name: Dictionary<, >
  nameWithType: Dictionary<, >
  fullName: Dictionary<, >
  nameWithType.vb: Dictionary(Of , )
  fullName.vb: Dictionary(Of , )
  name.vb: Dictionary(Of , )
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: FlowR.Core.Node.Init*
  commentId: Overload:FlowR.Core.Node.Init
  name: Init
  nameWithType: Node.Init
  fullName: FlowR.Core.Node.Init
- uid: FlowR.Core.Node.IsInitialized*
  commentId: Overload:FlowR.Core.Node.IsInitialized
  name: IsInitialized
  nameWithType: Node.IsInitialized
  fullName: FlowR.Core.Node.IsInitialized
- uid: FlowR.Core.Node.Text*
  commentId: Overload:FlowR.Core.Node.Text
  name: Text
  nameWithType: Node.Text
  fullName: FlowR.Core.Node.Text
- uid: FlowR.Core.Node._SetText*
  commentId: Overload:FlowR.Core.Node._SetText
  name: _SetText
  nameWithType: Node._SetText
  fullName: FlowR.Core.Node._SetText
- uid: FlowR.Core.Node.Value*
  commentId: Overload:FlowR.Core.Node.Value
  name: Value
  nameWithType: Node.Value
  fullName: FlowR.Core.Node.Value
