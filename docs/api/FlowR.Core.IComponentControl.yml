### YamlMime:ManagedReference
items:
- uid: FlowR.Core.IComponentControl
  commentId: T:FlowR.Core.IComponentControl
  id: IComponentControl
  parent: FlowR.Core
  children:
  - FlowR.Core.IComponentControl.Collect(System.String)
  - FlowR.Core.IComponentControl.GetControlName
  langs:
  - csharp
  - vb
  name: IComponentControl
  nameWithType: IComponentControl
  fullName: FlowR.Core.IComponentControl
  type: Interface
  source:
    remote:
      path: FlowR.Core/IComponentControl.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: IComponentControl
    path: FlowR.Core/IComponentControl.cs
    startLine: 7
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nInterface for ComponentControls \n"
  example: []
  syntax:
    content: public interface IComponentControl
    content.vb: Public Interface IComponentControl
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: FlowR.Core.IComponentControl.GetControlName
  commentId: M:FlowR.Core.IComponentControl.GetControlName
  id: GetControlName
  parent: FlowR.Core.IComponentControl
  langs:
  - csharp
  - vb
  name: GetControlName()
  nameWithType: IComponentControl.GetControlName()
  fullName: FlowR.Core.IComponentControl.GetControlName()
  type: Method
  source:
    remote:
      path: FlowR.Core/IComponentControl.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: GetControlName
    path: FlowR.Core/IComponentControl.cs
    startLine: 12
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nThe name of the control used as key for returning values\n"
  example: []
  syntax:
    content: string GetControlName()
    return:
      type: System.String
    content.vb: Function GetControlName As String
  overload: FlowR.Core.IComponentControl.GetControlName*
- uid: FlowR.Core.IComponentControl.Collect(System.String)
  commentId: M:FlowR.Core.IComponentControl.Collect(System.String)
  id: Collect(System.String)
  parent: FlowR.Core.IComponentControl
  langs:
  - csharp
  - vb
  name: Collect(String)
  nameWithType: IComponentControl.Collect(String)
  fullName: FlowR.Core.IComponentControl.Collect(System.String)
  type: Method
  source:
    remote:
      path: FlowR.Core/IComponentControl.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: Collect
    path: FlowR.Core/IComponentControl.cs
    startLine: 19
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nCalled when Form needs to collect the values from client\n"
  example: []
  syntax:
    content: Task<string> Collect(string path = "value")
    parameters:
    - id: path
      type: System.String
      description: ''
    return:
      type: Task{System.String}
      description: ''
    content.vb: Function Collect(path As String = "value") As Task(Of String)
  overload: FlowR.Core.IComponentControl.Collect*
references:
- uid: FlowR.Core
  commentId: N:FlowR.Core
  name: FlowR.Core
  nameWithType: FlowR.Core
  fullName: FlowR.Core
- uid: FlowR.Core.IComponentControl.GetControlName*
  commentId: Overload:FlowR.Core.IComponentControl.GetControlName
  name: GetControlName
  nameWithType: IComponentControl.GetControlName
  fullName: FlowR.Core.IComponentControl.GetControlName
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: FlowR.Core.IComponentControl.Collect*
  commentId: Overload:FlowR.Core.IComponentControl.Collect
  name: Collect
  nameWithType: IComponentControl.Collect
  fullName: FlowR.Core.IComponentControl.Collect
- uid: Task{System.String}
  commentId: '!:Task{System.String}'
  definition: Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
