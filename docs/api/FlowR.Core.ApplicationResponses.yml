### YamlMime:ManagedReference
items:
- uid: FlowR.Core.ApplicationResponses
  commentId: T:FlowR.Core.ApplicationResponses
  id: ApplicationResponses
  parent: FlowR.Core
  children:
  - FlowR.Core.ApplicationResponses.SetResponse(FlowR.Core.Message.IMessageResponse)
  - FlowR.Core.ApplicationResponses.WaitResponse(FlowR.Core.Application,FlowR.Core.Message.IMessageResponse,System.Int32)
  langs:
  - csharp
  - vb
  name: ApplicationResponses
  nameWithType: ApplicationResponses
  fullName: FlowR.Core.ApplicationResponses
  type: Class
  source:
    remote:
      path: FlowR.Core/ApplicationResponses.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: ApplicationResponses
    path: FlowR.Core/ApplicationResponses.cs
    startLine: 11
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\nLogicv class for Message Responses\n"
  example: []
  syntax:
    content: 'public class ApplicationResponses : object'
    content.vb: >-
      Public Class ApplicationResponses

          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: FlowR.Core.ApplicationResponses.WaitResponse(FlowR.Core.Application,FlowR.Core.Message.IMessageResponse,System.Int32)
  commentId: M:FlowR.Core.ApplicationResponses.WaitResponse(FlowR.Core.Application,FlowR.Core.Message.IMessageResponse,System.Int32)
  id: WaitResponse(FlowR.Core.Application,FlowR.Core.Message.IMessageResponse,System.Int32)
  parent: FlowR.Core.ApplicationResponses
  langs:
  - csharp
  - vb
  name: WaitResponse(Application, IMessageResponse, Int32)
  nameWithType: ApplicationResponses.WaitResponse(Application, IMessageResponse, Int32)
  fullName: FlowR.Core.ApplicationResponses.WaitResponse(FlowR.Core.Application, FlowR.Core.Message.IMessageResponse, System.Int32)
  type: Method
  source:
    remote:
      path: FlowR.Core/ApplicationResponses.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: WaitResponse
    path: FlowR.Core/ApplicationResponses.cs
    startLine: 23
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\n[internal use] Send and wait for a response\n"
  example: []
  syntax:
    content: public Task<string> WaitResponse(Application app, IMessageResponse message, int timeoutSeconds = 2)
    parameters:
    - id: app
      type: FlowR.Core.Application
      description: ''
    - id: message
      type: FlowR.Core.Message.IMessageResponse
      description: ''
    - id: timeoutSeconds
      type: System.Int32
      description: ''
    return:
      type: Task{System.String}
      description: ''
    content.vb: Public Function WaitResponse(app As Application, message As IMessageResponse, timeoutSeconds As Integer = 2) As Task(Of String)
  overload: FlowR.Core.ApplicationResponses.WaitResponse*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FlowR.Core.ApplicationResponses.SetResponse(FlowR.Core.Message.IMessageResponse)
  commentId: M:FlowR.Core.ApplicationResponses.SetResponse(FlowR.Core.Message.IMessageResponse)
  id: SetResponse(FlowR.Core.Message.IMessageResponse)
  parent: FlowR.Core.ApplicationResponses
  langs:
  - csharp
  - vb
  name: SetResponse(IMessageResponse)
  nameWithType: ApplicationResponses.SetResponse(IMessageResponse)
  fullName: FlowR.Core.ApplicationResponses.SetResponse(FlowR.Core.Message.IMessageResponse)
  type: Method
  source:
    remote:
      path: FlowR.Core/ApplicationResponses.cs
      branch: master
      repo: https://github.com/abbadon1334/RealFlowR.git
    id: SetResponse
    path: FlowR.Core/ApplicationResponses.cs
    startLine: 50
  assemblies:
  - FlowR.Core
  namespace: FlowR.Core
  summary: "\n[internal use] Process response from client\n"
  example: []
  syntax:
    content: public void SetResponse(IMessageResponse message)
    parameters:
    - id: message
      type: FlowR.Core.Message.IMessageResponse
      description: ''
    content.vb: Public Sub SetResponse(message As IMessageResponse)
  overload: FlowR.Core.ApplicationResponses.SetResponse*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: FlowR.Core
  commentId: N:FlowR.Core
  name: FlowR.Core
  nameWithType: FlowR.Core
  fullName: FlowR.Core
- uid: FlowR.Core.ApplicationResponses.WaitResponse*
  commentId: Overload:FlowR.Core.ApplicationResponses.WaitResponse
  name: WaitResponse
  nameWithType: ApplicationResponses.WaitResponse
  fullName: FlowR.Core.ApplicationResponses.WaitResponse
- uid: FlowR.Core.Application
  commentId: T:FlowR.Core.Application
  parent: FlowR.Core
  name: Application
  nameWithType: Application
  fullName: FlowR.Core.Application
- uid: FlowR.Core.Message.IMessageResponse
  commentId: T:FlowR.Core.Message.IMessageResponse
  parent: FlowR.Core.Message
  name: IMessageResponse
  nameWithType: IMessageResponse
  fullName: FlowR.Core.Message.IMessageResponse
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Task{System.String}
  commentId: '!:Task{System.String}'
  definition: Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: FlowR.Core.Message
  commentId: N:FlowR.Core.Message
  name: FlowR.Core.Message
  nameWithType: FlowR.Core.Message
  fullName: FlowR.Core.Message
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: FlowR.Core.ApplicationResponses.SetResponse*
  commentId: Overload:FlowR.Core.ApplicationResponses.SetResponse
  name: SetResponse
  nameWithType: ApplicationResponses.SetResponse
  fullName: FlowR.Core.ApplicationResponses.SetResponse
